using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.examples.report
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using Trade = com.opengamma.strata.product.Trade;

	/// <summary>
	/// Represents a list of trades.
	/// <para>
	/// This class exists to allow the list of trades to be serialized and deserialized
	/// using Joda-Beans. It is not intended to be a general purpose portfolio.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class TradeList implements org.joda.beans.ImmutableBean
	public sealed class TradeList : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<com.opengamma.strata.product.Trade> trades;
		private readonly ImmutableList<Trade> trades;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from a list of trades.
	  /// </summary>
	  /// <param name="trades">  the list of trades </param>
	  /// <returns> the portfolio </returns>
	  public static TradeList of(IList<Trade> trades)
	  {
		return new TradeList(trades);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code TradeList}.
	  /// </summary>
	  private static readonly TypedMetaBean<TradeList> META_BEAN = LightMetaBean.of(typeof(TradeList), MethodHandles.lookup(), new string[] {"trades"}, ImmutableList.of());

	  /// <summary>
	  /// The meta-bean for {@code TradeList}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<TradeList> meta()
	  {
		return META_BEAN;
	  }

	  static TradeList()
	  {
		MetaBean.register(META_BEAN);
	  }

	  private TradeList(IList<Trade> trades)
	  {
		JodaBeanUtils.notNull(trades, "trades");
		this.trades = ImmutableList.copyOf(trades);
	  }

	  public override TypedMetaBean<TradeList> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the trades. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<Trade> Trades
	  {
		  get
		  {
			return trades;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  TradeList other = (TradeList) obj;
		  return JodaBeanUtils.equal(trades, other.trades);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(trades);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("TradeList{");
		buf.Append("trades").Append('=').Append(JodaBeanUtils.ToString(trades));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}