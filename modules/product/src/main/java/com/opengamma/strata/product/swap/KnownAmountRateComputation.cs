using System;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product.swap
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ImmutableSet = com.google.common.collect.ImmutableSet;
	using CurrencyAmount = com.opengamma.strata.basics.currency.CurrencyAmount;
	using Index = com.opengamma.strata.basics.index.Index;
	using RateComputation = com.opengamma.strata.product.rate.RateComputation;

	/// <summary>
	/// Defines a known amount of interest as a rate computation.
	/// <para>
	/// This is a special computation that represents a known amount instead of a rate.
	/// It is used to pass the known amount through the standard rate computation process.
	/// This computation is converted to a <seealso cref="KnownAmountNotionalSwapPaymentPeriod"/> for pricing.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") final class KnownAmountRateComputation implements com.opengamma.strata.product.rate.RateComputation, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class KnownAmountRateComputation : RateComputation, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final com.opengamma.strata.basics.currency.CurrencyAmount amount;
		private readonly CurrencyAmount amount;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates an instance.
	  /// </summary>
	  /// <param name="amount">  the known amount </param>
	  /// <returns> the known amount </returns>
	  public static KnownAmountRateComputation of(CurrencyAmount amount)
	  {
		return new KnownAmountRateComputation(amount);
	  }

	  //-------------------------------------------------------------------------
	  public void collectIndices(ImmutableSet.Builder<Index> builder)
	  {
		// no indices to add
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code KnownAmountRateComputation}.
	  /// </summary>
	  private static readonly TypedMetaBean<KnownAmountRateComputation> META_BEAN = LightMetaBean.of(typeof(KnownAmountRateComputation), MethodHandles.lookup(), new string[] {"amount"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code KnownAmountRateComputation}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<KnownAmountRateComputation> meta()
	  {
		return META_BEAN;
	  }

	  static KnownAmountRateComputation()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private KnownAmountRateComputation(CurrencyAmount amount)
	  {
		this.amount = amount;
	  }

	  public override TypedMetaBean<KnownAmountRateComputation> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the known amount. </summary>
	  /// <returns> the value of the property </returns>
	  public CurrencyAmount Amount
	  {
		  get
		  {
			return amount;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  KnownAmountRateComputation other = (KnownAmountRateComputation) obj;
		  return JodaBeanUtils.equal(amount, other.amount);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(amount);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("KnownAmountRateComputation{");
		buf.Append("amount").Append('=').Append(JodaBeanUtils.ToString(amount));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}