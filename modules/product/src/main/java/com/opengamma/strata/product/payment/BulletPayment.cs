using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product.payment
{

	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using ImmutableValidator = org.joda.beans.gen.ImmutableValidator;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using ImmutableSet = com.google.common.collect.ImmutableSet;
	using ReferenceData = com.opengamma.strata.basics.ReferenceData;
	using Resolvable = com.opengamma.strata.basics.Resolvable;
	using Currency = com.opengamma.strata.basics.currency.Currency;
	using CurrencyAmount = com.opengamma.strata.basics.currency.CurrencyAmount;
	using Payment = com.opengamma.strata.basics.currency.Payment;
	using AdjustableDate = com.opengamma.strata.basics.date.AdjustableDate;
	using PayReceive = com.opengamma.strata.product.common.PayReceive;

	/// <summary>
	/// A bullet payment.
	/// <para>
	/// An Over-The-Counter (OTC) trade where one party makes a payment to another.
	/// The reason for the payment is not captured.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class BulletPayment implements com.opengamma.strata.product.Product, com.opengamma.strata.basics.Resolvable<ResolvedBulletPayment>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class BulletPayment : Product, Resolvable<ResolvedBulletPayment>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.product.common.PayReceive payReceive;
		private readonly PayReceive payReceive;
	  /// <summary>
	  /// The amount of the payment.
	  /// <para>
	  /// The amount is unsigned, with the direction implied by {@code payReceive}.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.currency.CurrencyAmount value;
	  private readonly CurrencyAmount value;
	  /// <summary>
	  /// The date that the payment is made.
	  /// <para>
	  /// This date should normally be a valid business day.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.date.AdjustableDate date;
	  private readonly AdjustableDate date;

	  //-------------------------------------------------------------------------
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @ImmutableValidator private void validate()
	  private void validate()
	  {
		if (value.Amount < 0)
		{
		  throw new System.ArgumentException("Amount must be unsigned");
		}
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Gets the currency of this payment.
	  /// </summary>
	  /// <returns> the payment currency </returns>
	  public Currency Currency
	  {
		  get
		  {
			return value.Currency;
		  }
	  }

	  public ImmutableSet<Currency> allCurrencies()
	  {
		return ImmutableSet.of(value.Currency);
	  }

	  //-------------------------------------------------------------------------
	  public ResolvedBulletPayment resolve(ReferenceData refData)
	  {
		CurrencyAmount signed = payReceive == PayReceive.PAY ? value.negated() : value;
		Payment payment = Payment.of(signed, date.adjusted(refData));
		return ResolvedBulletPayment.of(payment);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code BulletPayment}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static BulletPayment.Meta meta()
	  {
		return BulletPayment.Meta.INSTANCE;
	  }

	  static BulletPayment()
	  {
		MetaBean.register(BulletPayment.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static BulletPayment.Builder builder()
	  {
		return new BulletPayment.Builder();
	  }

	  private BulletPayment(PayReceive payReceive, CurrencyAmount value, AdjustableDate date)
	  {
		JodaBeanUtils.notNull(payReceive, "payReceive");
		JodaBeanUtils.notNull(value, "value");
		JodaBeanUtils.notNull(date, "date");
		this.payReceive = payReceive;
		this.value = value;
		this.date = date;
		validate();
	  }

	  public override BulletPayment.Meta metaBean()
	  {
		return BulletPayment.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets whether the payment is to be paid or received.
	  /// <para>
	  /// A value of 'Pay' implies that the amount is paid to the counterparty.
	  /// A value of 'Receive' implies that the amount is received from the counterparty.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PayReceive PayReceive
	  {
		  get
		  {
			return payReceive;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the amount of the payment.
	  /// <para>
	  /// The amount is unsigned, with the direction implied by {@code payReceive}.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurrencyAmount Value
	  {
		  get
		  {
			return value;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the date that the payment is made.
	  /// <para>
	  /// This date should normally be a valid business day.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public AdjustableDate Date
	  {
		  get
		  {
			return date;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  BulletPayment other = (BulletPayment) obj;
		  return JodaBeanUtils.equal(payReceive, other.payReceive) && JodaBeanUtils.equal(value, other.value) && JodaBeanUtils.equal(date, other.date);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(payReceive);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(value);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(date);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("BulletPayment{");
		buf.Append("payReceive").Append('=').Append(payReceive).Append(',').Append(' ');
		buf.Append("value").Append('=').Append(value).Append(',').Append(' ');
		buf.Append("date").Append('=').Append(JodaBeanUtils.ToString(date));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code BulletPayment}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  payReceive_Renamed = DirectMetaProperty.ofImmutable(this, "payReceive", typeof(BulletPayment), typeof(PayReceive));
			  value_Renamed = DirectMetaProperty.ofImmutable(this, "value", typeof(BulletPayment), typeof(CurrencyAmount));
			  date_Renamed = DirectMetaProperty.ofImmutable(this, "date", typeof(BulletPayment), typeof(AdjustableDate));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "payReceive", "value", "date");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code payReceive} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<PayReceive> payReceive_Renamed;
		/// <summary>
		/// The meta-property for the {@code value} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<CurrencyAmount> value_Renamed;
		/// <summary>
		/// The meta-property for the {@code date} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<AdjustableDate> date_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "payReceive", "value", "date");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -885469925: // payReceive
			  return payReceive_Renamed;
			case 111972721: // value
			  return value_Renamed;
			case 3076014: // date
			  return date_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override BulletPayment.Builder builder()
		{
		  return new BulletPayment.Builder();
		}

		public override Type beanType()
		{
		  return typeof(BulletPayment);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code payReceive} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<PayReceive> payReceive()
		{
		  return payReceive_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code value} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<CurrencyAmount> value()
		{
		  return value_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code date} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<AdjustableDate> date()
		{
		  return date_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -885469925: // payReceive
			  return ((BulletPayment) bean).PayReceive;
			case 111972721: // value
			  return ((BulletPayment) bean).Value;
			case 3076014: // date
			  return ((BulletPayment) bean).Date;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code BulletPayment}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<BulletPayment>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal PayReceive payReceive_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal CurrencyAmount value_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal AdjustableDate date_Renamed;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(BulletPayment beanToCopy)
		{
		  this.payReceive_Renamed = beanToCopy.PayReceive;
		  this.value_Renamed = beanToCopy.Value;
		  this.date_Renamed = beanToCopy.Date;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -885469925: // payReceive
			  return payReceive_Renamed;
			case 111972721: // value
			  return value_Renamed;
			case 3076014: // date
			  return date_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -885469925: // payReceive
			  this.payReceive_Renamed = (PayReceive) newValue;
			  break;
			case 111972721: // value
			  this.value_Renamed = (CurrencyAmount) newValue;
			  break;
			case 3076014: // date
			  this.date_Renamed = (AdjustableDate) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override BulletPayment build()
		{
		  return new BulletPayment(payReceive_Renamed, value_Renamed, date_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets whether the payment is to be paid or received.
		/// <para>
		/// A value of 'Pay' implies that the amount is paid to the counterparty.
		/// A value of 'Receive' implies that the amount is received from the counterparty.
		/// </para>
		/// </summary>
		/// <param name="payReceive">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder payReceive(PayReceive payReceive)
		{
		  JodaBeanUtils.notNull(payReceive, "payReceive");
		  this.payReceive_Renamed = payReceive;
		  return this;
		}

		/// <summary>
		/// Sets the amount of the payment.
		/// <para>
		/// The amount is unsigned, with the direction implied by {@code payReceive}.
		/// </para>
		/// </summary>
		/// <param name="value">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder value(CurrencyAmount value)
		{
		  JodaBeanUtils.notNull(value, "value");
		  this.value_Renamed = value;
		  return this;
		}

		/// <summary>
		/// Sets the date that the payment is made.
		/// <para>
		/// This date should normally be a valid business day.
		/// </para>
		/// </summary>
		/// <param name="date">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder date(AdjustableDate date)
		{
		  JodaBeanUtils.notNull(date, "date");
		  this.date_Renamed = date;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("BulletPayment.Builder{");
		  buf.Append("payReceive").Append('=').Append(JodaBeanUtils.ToString(payReceive_Renamed)).Append(',').Append(' ');
		  buf.Append("value").Append('=').Append(JodaBeanUtils.ToString(value_Renamed)).Append(',').Append(' ');
		  buf.Append("date").Append('=').Append(JodaBeanUtils.ToString(date_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}