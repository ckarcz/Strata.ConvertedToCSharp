using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2018 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using Country = com.opengamma.strata.basics.location.Country;

	/// <summary>
	/// A simple legal entity implementation.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private", metaScope = "private", factoryName = "of") public final class SimpleLegalEntity implements LegalEntity, java.io.Serializable, org.joda.beans.ImmutableBean
	[Serializable]
	public sealed class SimpleLegalEntity : LegalEntity, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final LegalEntityId legalEntityId;
		private readonly LegalEntityId legalEntityId;
	  /// <summary>
	  /// The legal entity name.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final String name;
	  private readonly string name;
	  /// <summary>
	  /// The country that the legal entity is based in.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final com.opengamma.strata.basics.location.Country country;
	  private readonly Country country;

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code SimpleLegalEntity}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static MetaBean meta()
	  {
		return SimpleLegalEntity.Meta.INSTANCE;
	  }

	  static SimpleLegalEntity()
	  {
		MetaBean.register(SimpleLegalEntity.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Obtains an instance. </summary>
	  /// <param name="legalEntityId">  the value of the property, not null </param>
	  /// <param name="name">  the value of the property, not null </param>
	  /// <param name="country">  the value of the property, not null </param>
	  /// <returns> the instance </returns>
	  public static SimpleLegalEntity of(LegalEntityId legalEntityId, string name, Country country)
	  {
		return new SimpleLegalEntity(legalEntityId, name, country);
	  }

	  private SimpleLegalEntity(LegalEntityId legalEntityId, string name, Country country)
	  {
		JodaBeanUtils.notNull(legalEntityId, "legalEntityId");
		JodaBeanUtils.notNull(name, "name");
		JodaBeanUtils.notNull(country, "country");
		this.legalEntityId = legalEntityId;
		this.name = name;
		this.country = country;
	  }

	  public override MetaBean metaBean()
	  {
		return SimpleLegalEntity.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the legal entity identifier. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LegalEntityId LegalEntityId
	  {
		  get
		  {
			return legalEntityId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the legal entity name. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public string Name
	  {
		  get
		  {
			return name;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the country that the legal entity is based in. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public Country Country
	  {
		  get
		  {
			return country;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  SimpleLegalEntity other = (SimpleLegalEntity) obj;
		  return JodaBeanUtils.equal(legalEntityId, other.legalEntityId) && JodaBeanUtils.equal(name, other.name) && JodaBeanUtils.equal(country, other.country);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(legalEntityId);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(name);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(country);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("SimpleLegalEntity{");
		buf.Append("legalEntityId").Append('=').Append(legalEntityId).Append(',').Append(' ');
		buf.Append("name").Append('=').Append(name).Append(',').Append(' ');
		buf.Append("country").Append('=').Append(JodaBeanUtils.ToString(country));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code SimpleLegalEntity}.
	  /// </summary>
	  private sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  legalEntityId = DirectMetaProperty.ofImmutable(this, "legalEntityId", typeof(SimpleLegalEntity), typeof(LegalEntityId));
			  name = DirectMetaProperty.ofImmutable(this, "name", typeof(SimpleLegalEntity), typeof(string));
			  country = DirectMetaProperty.ofImmutable(this, "country", typeof(SimpleLegalEntity), typeof(Country));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "legalEntityId", "name", "country");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code legalEntityId} property.
		/// </summary>
		internal MetaProperty<LegalEntityId> legalEntityId;
		/// <summary>
		/// The meta-property for the {@code name} property.
		/// </summary>
		internal MetaProperty<string> name;
		/// <summary>
		/// The meta-property for the {@code country} property.
		/// </summary>
		internal MetaProperty<Country> country;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "legalEntityId", "name", "country");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return legalEntityId;
			case 3373707: // name
			  return name;
			case 957831062: // country
			  return country;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends SimpleLegalEntity> builder()
		public override BeanBuilder<SimpleLegalEntity> builder()
		{
		  return new SimpleLegalEntity.Builder();
		}

		public override Type beanType()
		{
		  return typeof(SimpleLegalEntity);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return ((SimpleLegalEntity) bean).LegalEntityId;
			case 3373707: // name
			  return ((SimpleLegalEntity) bean).Name;
			case 957831062: // country
			  return ((SimpleLegalEntity) bean).Country;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code SimpleLegalEntity}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<SimpleLegalEntity>
	  {

		internal LegalEntityId legalEntityId;
		internal string name;
		internal Country country;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return legalEntityId;
			case 3373707: // name
			  return name;
			case 957831062: // country
			  return country;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  this.legalEntityId = (LegalEntityId) newValue;
			  break;
			case 3373707: // name
			  this.name = (string) newValue;
			  break;
			case 957831062: // country
			  this.country = (Country) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override SimpleLegalEntity build()
		{
		  return new SimpleLegalEntity(legalEntityId, name, country);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("SimpleLegalEntity.Builder{");
		  buf.Append("legalEntityId").Append('=').Append(JodaBeanUtils.ToString(legalEntityId)).Append(',').Append(' ');
		  buf.Append("name").Append('=').Append(JodaBeanUtils.ToString(name)).Append(',').Append(' ');
		  buf.Append("country").Append('=').Append(JodaBeanUtils.ToString(country));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}