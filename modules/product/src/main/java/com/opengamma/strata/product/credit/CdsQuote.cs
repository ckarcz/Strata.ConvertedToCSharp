using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product.credit
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using CdsQuoteConvention = com.opengamma.strata.product.credit.type.CdsQuoteConvention;

	/// <summary>
	/// Market quote for a single-name credit default swap (CDS). 
	/// <para>
	/// The CDS quote convention and quoted value are stored in this class.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class CdsQuote implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class CdsQuote : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.product.credit.type.CdsQuoteConvention quoteConvention;
		private readonly CdsQuoteConvention quoteConvention;
	  /// <summary>
	  /// The quoted value.
	  /// <para>
	  /// This value must be represented in decimal form.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double quotedValue;
	  private readonly double quotedValue;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates an instance.
	  /// </summary>
	  /// <param name="quoteConvention"> the quote convention </param>
	  /// <param name="quotedValue">  the quoted value </param>
	  /// <returns> the instance </returns>
	  public static CdsQuote of(CdsQuoteConvention quoteConvention, double quotedValue)
	  {
		return new CdsQuote(quoteConvention, quotedValue);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CdsQuote}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static CdsQuote.Meta meta()
	  {
		return CdsQuote.Meta.INSTANCE;
	  }

	  static CdsQuote()
	  {
		MetaBean.register(CdsQuote.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private CdsQuote(CdsQuoteConvention quoteConvention, double quotedValue)
	  {
		JodaBeanUtils.notNull(quoteConvention, "quoteConvention");
		this.quoteConvention = quoteConvention;
		this.quotedValue = quotedValue;
	  }

	  public override CdsQuote.Meta metaBean()
	  {
		return CdsQuote.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the CDS quote convention. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CdsQuoteConvention QuoteConvention
	  {
		  get
		  {
			return quoteConvention;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the quoted value.
	  /// <para>
	  /// This value must be represented in decimal form.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property </returns>
	  public double QuotedValue
	  {
		  get
		  {
			return quotedValue;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CdsQuote other = (CdsQuote) obj;
		  return JodaBeanUtils.equal(quoteConvention, other.quoteConvention) && JodaBeanUtils.equal(quotedValue, other.quotedValue);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(quoteConvention);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(quotedValue);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("CdsQuote{");
		buf.Append("quoteConvention").Append('=').Append(quoteConvention).Append(',').Append(' ');
		buf.Append("quotedValue").Append('=').Append(JodaBeanUtils.ToString(quotedValue));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code CdsQuote}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  quoteConvention_Renamed = DirectMetaProperty.ofImmutable(this, "quoteConvention", typeof(CdsQuote), typeof(CdsQuoteConvention));
			  quotedValue_Renamed = DirectMetaProperty.ofImmutable(this, "quotedValue", typeof(CdsQuote), Double.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "quoteConvention", "quotedValue");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code quoteConvention} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<CdsQuoteConvention> quoteConvention_Renamed;
		/// <summary>
		/// The meta-property for the {@code quotedValue} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<double> quotedValue_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "quoteConvention", "quotedValue");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 2049149709: // quoteConvention
			  return quoteConvention_Renamed;
			case 1218162921: // quotedValue
			  return quotedValue_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends CdsQuote> builder()
		public override BeanBuilder<CdsQuote> builder()
		{
		  return new CdsQuote.Builder();
		}

		public override Type beanType()
		{
		  return typeof(CdsQuote);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code quoteConvention} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<CdsQuoteConvention> quoteConvention()
		{
		  return quoteConvention_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code quotedValue} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<double> quotedValue()
		{
		  return quotedValue_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 2049149709: // quoteConvention
			  return ((CdsQuote) bean).QuoteConvention;
			case 1218162921: // quotedValue
			  return ((CdsQuote) bean).QuotedValue;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code CdsQuote}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<CdsQuote>
	  {

		internal CdsQuoteConvention quoteConvention;
		internal double quotedValue;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 2049149709: // quoteConvention
			  return quoteConvention;
			case 1218162921: // quotedValue
			  return quotedValue;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 2049149709: // quoteConvention
			  this.quoteConvention = (CdsQuoteConvention) newValue;
			  break;
			case 1218162921: // quotedValue
			  this.quotedValue = (double?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override CdsQuote build()
		{
		  return new CdsQuote(quoteConvention, quotedValue);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("CdsQuote.Builder{");
		  buf.Append("quoteConvention").Append('=').Append(JodaBeanUtils.ToString(quoteConvention)).Append(',').Append(' ');
		  buf.Append("quotedValue").Append('=').Append(JodaBeanUtils.ToString(quotedValue));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------

	}

}