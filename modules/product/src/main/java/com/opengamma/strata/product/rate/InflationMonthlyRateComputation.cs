using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product.rate
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using ImmutableValidator = org.joda.beans.gen.ImmutableValidator;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ImmutableSet = com.google.common.collect.ImmutableSet;
	using Index = com.opengamma.strata.basics.index.Index;
	using PriceIndex = com.opengamma.strata.basics.index.PriceIndex;
	using PriceIndexObservation = com.opengamma.strata.basics.index.PriceIndexObservation;
	using ArgChecker = com.opengamma.strata.collect.ArgChecker;

	/// <summary>
	/// Defines the computation of inflation figures from a price index.
	/// <para>
	/// A price index is typically published monthly and has a delay before publication.
	/// The rate observed by this instance will be based on two observations of the index,
	/// one relative to the accrual start date and one relative to the accrual end date.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class InflationMonthlyRateComputation implements RateComputation, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class InflationMonthlyRateComputation : RateComputation, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.index.PriceIndexObservation startObservation;
		private readonly PriceIndexObservation startObservation;
	  /// <summary>
	  /// The observation at the end.
	  /// <para>
	  /// The inflation rate is the ratio between the start and end observation.
	  /// The end month is typically three months before the end of the period.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.index.PriceIndexObservation endObservation;
	  private readonly PriceIndexObservation endObservation;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates an instance from an index, reference start month and reference end month.
	  /// </summary>
	  /// <param name="index">  the index </param>
	  /// <param name="referenceStartMonth">  the reference start month </param>
	  /// <param name="referenceEndMonth">  the reference end month </param>
	  /// <returns> the inflation rate computation </returns>
	  public static InflationMonthlyRateComputation of(PriceIndex index, YearMonth referenceStartMonth, YearMonth referenceEndMonth)
	  {

		return new InflationMonthlyRateComputation(PriceIndexObservation.of(index, referenceStartMonth), PriceIndexObservation.of(index, referenceEndMonth));
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @ImmutableValidator private void validate()
	  private void validate()
	  {
		ArgChecker.isTrue(startObservation.Index.Equals(endObservation.Index), "Both observations must be for the same index");
		ArgChecker.inOrderNotEqual(startObservation.FixingMonth, endObservation.FixingMonth, "referenceStartMonth", "referenceEndMonth");
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the Price index.
	  /// </summary>
	  /// <returns> the Price index </returns>
	  public PriceIndex Index
	  {
		  get
		  {
			return startObservation.Index;
		  }
	  }

	  //-------------------------------------------------------------------------
	  public void collectIndices(ImmutableSet.Builder<Index> builder)
	  {
		builder.add(Index);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code InflationMonthlyRateComputation}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static InflationMonthlyRateComputation.Meta meta()
	  {
		return InflationMonthlyRateComputation.Meta.INSTANCE;
	  }

	  static InflationMonthlyRateComputation()
	  {
		MetaBean.register(InflationMonthlyRateComputation.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private InflationMonthlyRateComputation(PriceIndexObservation startObservation, PriceIndexObservation endObservation)
	  {
		JodaBeanUtils.notNull(startObservation, "startObservation");
		JodaBeanUtils.notNull(endObservation, "endObservation");
		this.startObservation = startObservation;
		this.endObservation = endObservation;
		validate();
	  }

	  public override InflationMonthlyRateComputation.Meta metaBean()
	  {
		return InflationMonthlyRateComputation.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the observation at the start.
	  /// <para>
	  /// The inflation rate is the ratio between the start and end observation.
	  /// The start month is typically three months before the start of the period.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PriceIndexObservation StartObservation
	  {
		  get
		  {
			return startObservation;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the observation at the end.
	  /// <para>
	  /// The inflation rate is the ratio between the start and end observation.
	  /// The end month is typically three months before the end of the period.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PriceIndexObservation EndObservation
	  {
		  get
		  {
			return endObservation;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  InflationMonthlyRateComputation other = (InflationMonthlyRateComputation) obj;
		  return JodaBeanUtils.equal(startObservation, other.startObservation) && JodaBeanUtils.equal(endObservation, other.endObservation);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(startObservation);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(endObservation);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("InflationMonthlyRateComputation{");
		buf.Append("startObservation").Append('=').Append(startObservation).Append(',').Append(' ');
		buf.Append("endObservation").Append('=').Append(JodaBeanUtils.ToString(endObservation));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code InflationMonthlyRateComputation}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  startObservation_Renamed = DirectMetaProperty.ofImmutable(this, "startObservation", typeof(InflationMonthlyRateComputation), typeof(PriceIndexObservation));
			  endObservation_Renamed = DirectMetaProperty.ofImmutable(this, "endObservation", typeof(InflationMonthlyRateComputation), typeof(PriceIndexObservation));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "startObservation", "endObservation");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code startObservation} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<PriceIndexObservation> startObservation_Renamed;
		/// <summary>
		/// The meta-property for the {@code endObservation} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<PriceIndexObservation> endObservation_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "startObservation", "endObservation");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1098347926: // startObservation
			  return startObservation_Renamed;
			case 82210897: // endObservation
			  return endObservation_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends InflationMonthlyRateComputation> builder()
		public override BeanBuilder<InflationMonthlyRateComputation> builder()
		{
		  return new InflationMonthlyRateComputation.Builder();
		}

		public override Type beanType()
		{
		  return typeof(InflationMonthlyRateComputation);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code startObservation} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<PriceIndexObservation> startObservation()
		{
		  return startObservation_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code endObservation} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<PriceIndexObservation> endObservation()
		{
		  return endObservation_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1098347926: // startObservation
			  return ((InflationMonthlyRateComputation) bean).StartObservation;
			case 82210897: // endObservation
			  return ((InflationMonthlyRateComputation) bean).EndObservation;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code InflationMonthlyRateComputation}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<InflationMonthlyRateComputation>
	  {

		internal PriceIndexObservation startObservation;
		internal PriceIndexObservation endObservation;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1098347926: // startObservation
			  return startObservation;
			case 82210897: // endObservation
			  return endObservation;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1098347926: // startObservation
			  this.startObservation = (PriceIndexObservation) newValue;
			  break;
			case 82210897: // endObservation
			  this.endObservation = (PriceIndexObservation) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override InflationMonthlyRateComputation build()
		{
		  return new InflationMonthlyRateComputation(startObservation, endObservation);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("InflationMonthlyRateComputation.Builder{");
		  buf.Append("startObservation").Append('=').Append(JodaBeanUtils.ToString(startObservation)).Append(',').Append(' ');
		  buf.Append("endObservation").Append('=').Append(JodaBeanUtils.ToString(endObservation));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}