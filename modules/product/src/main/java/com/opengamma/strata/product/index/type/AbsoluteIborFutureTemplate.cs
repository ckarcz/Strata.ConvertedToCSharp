using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product.index.type
{


	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ReferenceData = com.opengamma.strata.basics.ReferenceData;
	using IborIndex = com.opengamma.strata.basics.index.IborIndex;

	/// <summary>
	/// A template for creating an Ibor Future trade using an absolute definition of time.
	/// <para>
	/// The future is selected from a sequence of futures based on a year-month.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") final class AbsoluteIborFutureTemplate implements IborFutureTemplate, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class AbsoluteIborFutureTemplate : IborFutureTemplate, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.YearMonth yearMonth;
		private readonly YearMonth yearMonth;
	  /// <summary>
	  /// The underlying futures convention.
	  /// <para>
	  /// This specifies the market convention of the future to be created.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final IborFutureConvention convention;
	  private readonly IborFutureConvention convention;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains a template based on the specified convention.
	  /// <para>
	  /// The future is selected from a sequence of futures based on a year-month.
	  /// In most cases, the date of the future will be in the same month as the specified month,
	  /// but this is not guaranteed.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="yearMonth">  the year-month to use to select the future </param>
	  /// <param name="convention">  the future convention </param>
	  /// <returns> the template </returns>
	  public static AbsoluteIborFutureTemplate of(YearMonth yearMonth, IborFutureConvention convention)
	  {
		return new AbsoluteIborFutureTemplate(yearMonth, convention);
	  }

	  //-------------------------------------------------------------------------
	  public IborIndex Index
	  {
		  get
		  {
			return convention.Index;
		  }
	  }

	  public IborFutureTrade createTrade(LocalDate tradeDate, SecurityId securityId, double quantity, double notional, double price, ReferenceData refData)
	  {

		return convention.createTrade(tradeDate, securityId, yearMonth, quantity, notional, price, refData);
	  }

	  public LocalDate calculateReferenceDateFromTradeDate(LocalDate tradeDate, ReferenceData refData)
	  {
		return convention.calculateReferenceDateFromTradeDate(tradeDate, yearMonth, refData);
	  }

	  public double approximateMaturity(LocalDate valuationDate)
	  {
		return (yearMonth.getLong(PROLEPTIC_MONTH) - valuationDate.getLong(PROLEPTIC_MONTH)) / 12d;
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code AbsoluteIborFutureTemplate}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static AbsoluteIborFutureTemplate.Meta meta()
	  {
		return AbsoluteIborFutureTemplate.Meta.INSTANCE;
	  }

	  static AbsoluteIborFutureTemplate()
	  {
		MetaBean.register(AbsoluteIborFutureTemplate.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private AbsoluteIborFutureTemplate(YearMonth yearMonth, IborFutureConvention convention)
	  {
		JodaBeanUtils.notNull(yearMonth, "yearMonth");
		JodaBeanUtils.notNull(convention, "convention");
		this.yearMonth = yearMonth;
		this.convention = convention;
	  }

	  public override AbsoluteIborFutureTemplate.Meta metaBean()
	  {
		return AbsoluteIborFutureTemplate.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the year-month that defines the future.
	  /// <para>
	  /// Given an input month, a future is selected from the underlying sequence of futures.
	  /// In most cases, the date of the future will be in the same month as the input month,
	  /// but this is not guaranteed.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public YearMonth YearMonth
	  {
		  get
		  {
			return yearMonth;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the underlying futures convention.
	  /// <para>
	  /// This specifies the market convention of the future to be created.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public IborFutureConvention Convention
	  {
		  get
		  {
			return convention;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  AbsoluteIborFutureTemplate other = (AbsoluteIborFutureTemplate) obj;
		  return JodaBeanUtils.equal(yearMonth, other.yearMonth) && JodaBeanUtils.equal(convention, other.convention);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(yearMonth);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(convention);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("AbsoluteIborFutureTemplate{");
		buf.Append("yearMonth").Append('=').Append(yearMonth).Append(',').Append(' ');
		buf.Append("convention").Append('=').Append(JodaBeanUtils.ToString(convention));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code AbsoluteIborFutureTemplate}.
	  /// </summary>
	  internal sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  yearMonth_Renamed = DirectMetaProperty.ofImmutable(this, "yearMonth", typeof(AbsoluteIborFutureTemplate), typeof(YearMonth));
			  convention_Renamed = DirectMetaProperty.ofImmutable(this, "convention", typeof(AbsoluteIborFutureTemplate), typeof(IborFutureConvention));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "yearMonth", "convention");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code yearMonth} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<YearMonth> yearMonth_Renamed;
		/// <summary>
		/// The meta-property for the {@code convention} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<IborFutureConvention> convention_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "yearMonth", "convention");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -496678845: // yearMonth
			  return yearMonth_Renamed;
			case 2039569265: // convention
			  return convention_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends AbsoluteIborFutureTemplate> builder()
		public override BeanBuilder<AbsoluteIborFutureTemplate> builder()
		{
		  return new AbsoluteIborFutureTemplate.Builder();
		}

		public override Type beanType()
		{
		  return typeof(AbsoluteIborFutureTemplate);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code yearMonth} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<YearMonth> yearMonth()
		{
		  return yearMonth_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code convention} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<IborFutureConvention> convention()
		{
		  return convention_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -496678845: // yearMonth
			  return ((AbsoluteIborFutureTemplate) bean).YearMonth;
			case 2039569265: // convention
			  return ((AbsoluteIborFutureTemplate) bean).Convention;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code AbsoluteIborFutureTemplate}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<AbsoluteIborFutureTemplate>
	  {

		internal YearMonth yearMonth;
		internal IborFutureConvention convention;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -496678845: // yearMonth
			  return yearMonth;
			case 2039569265: // convention
			  return convention;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -496678845: // yearMonth
			  this.yearMonth = (YearMonth) newValue;
			  break;
			case 2039569265: // convention
			  this.convention = (IborFutureConvention) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override AbsoluteIborFutureTemplate build()
		{
		  return new AbsoluteIborFutureTemplate(yearMonth, convention);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("AbsoluteIborFutureTemplate.Builder{");
		  buf.Append("yearMonth").Append('=').Append(JodaBeanUtils.ToString(yearMonth)).Append(',').Append(' ');
		  buf.Append("convention").Append('=').Append(JodaBeanUtils.ToString(convention));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}