using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.product
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using MinimalMetaBean = org.joda.beans.impl.direct.MinimalMetaBean;

	using ImmutableSet = com.google.common.collect.ImmutableSet;
	using StandardId = com.opengamma.strata.basics.StandardId;
	using Currency = com.opengamma.strata.basics.currency.Currency;

	/// <summary>
	/// A summary of a portfolio item.
	/// <para>
	/// This can be used to display a summary of a portfolio to a user.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "minimal", metaScope = "private", factoryName = "of") public final class PortfolioItemSummary implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class PortfolioItemSummary : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(get = "optional") private final com.opengamma.strata.basics.StandardId id;
		private readonly StandardId id;
	  /// <summary>
	  /// The type of the item.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final PortfolioItemType portfolioItemType;
	  private readonly PortfolioItemType portfolioItemType;
	  /// <summary>
	  /// The type of the product.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ProductType productType;
	  private readonly ProductType productType;
	  /// <summary>
	  /// The currencies of the item.
	  /// <para>
	  /// This should include the primary currencies the item is based on, not just the payment currencies.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableSet<com.opengamma.strata.basics.currency.Currency> currencies;
	  private readonly ImmutableSet<Currency> currencies;
	  /// <summary>
	  /// The description of the item.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notBlank") private final String description;
	  private readonly string description;

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code PortfolioItemSummary}.
	  /// </summary>
	  private static readonly TypedMetaBean<PortfolioItemSummary> META_BEAN = MinimalMetaBean.of(typeof(PortfolioItemSummary), new string[] {"id", "portfolioItemType", "productType", "currencies", "description"}, () => new PortfolioItemSummary.Builder(), b => b.id, b => b.PortfolioItemType, b => b.ProductType, b => b.Currencies, b => b.Description);

	  /// <summary>
	  /// The meta-bean for {@code PortfolioItemSummary}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<PortfolioItemSummary> meta()
	  {
		return META_BEAN;
	  }

	  static PortfolioItemSummary()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Obtains an instance. </summary>
	  /// <param name="id">  the value of the property </param>
	  /// <param name="portfolioItemType">  the value of the property, not null </param>
	  /// <param name="productType">  the value of the property, not null </param>
	  /// <param name="currencies">  the value of the property, not null </param>
	  /// <param name="description">  the value of the property, not blank </param>
	  /// <returns> the instance </returns>
	  public static PortfolioItemSummary of(StandardId id, PortfolioItemType portfolioItemType, ProductType productType, ISet<Currency> currencies, string description)
	  {
		return new PortfolioItemSummary(id, portfolioItemType, productType, currencies, description);
	  }

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static PortfolioItemSummary.Builder builder()
	  {
		return new PortfolioItemSummary.Builder();
	  }

	  private PortfolioItemSummary(StandardId id, PortfolioItemType portfolioItemType, ProductType productType, ISet<Currency> currencies, string description)
	  {
		JodaBeanUtils.notNull(portfolioItemType, "portfolioItemType");
		JodaBeanUtils.notNull(productType, "productType");
		JodaBeanUtils.notNull(currencies, "currencies");
		JodaBeanUtils.notBlank(description, "description");
		this.id = id;
		this.portfolioItemType = portfolioItemType;
		this.productType = productType;
		this.currencies = ImmutableSet.copyOf(currencies);
		this.description = description;
	  }

	  public override TypedMetaBean<PortfolioItemSummary> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the identifier of the item, optional. </summary>
	  /// <returns> the optional value of the property, not null </returns>
	  public Optional<StandardId> Id
	  {
		  get
		  {
			return Optional.ofNullable(id);
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the type of the item. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PortfolioItemType PortfolioItemType
	  {
		  get
		  {
			return portfolioItemType;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the type of the product. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ProductType ProductType
	  {
		  get
		  {
			return productType;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the currencies of the item.
	  /// <para>
	  /// This should include the primary currencies the item is based on, not just the payment currencies.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableSet<Currency> Currencies
	  {
		  get
		  {
			return currencies;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the description of the item. </summary>
	  /// <returns> the value of the property, not blank </returns>
	  public string Description
	  {
		  get
		  {
			return description;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  PortfolioItemSummary other = (PortfolioItemSummary) obj;
		  return JodaBeanUtils.equal(id, other.id) && JodaBeanUtils.equal(portfolioItemType, other.portfolioItemType) && JodaBeanUtils.equal(productType, other.productType) && JodaBeanUtils.equal(currencies, other.currencies) && JodaBeanUtils.equal(description, other.description);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(id);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(portfolioItemType);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(productType);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(currencies);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(description);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(192);
		buf.Append("PortfolioItemSummary{");
		buf.Append("id").Append('=').Append(id).Append(',').Append(' ');
		buf.Append("portfolioItemType").Append('=').Append(portfolioItemType).Append(',').Append(' ');
		buf.Append("productType").Append('=').Append(productType).Append(',').Append(' ');
		buf.Append("currencies").Append('=').Append(currencies).Append(',').Append(' ');
		buf.Append("description").Append('=').Append(JodaBeanUtils.ToString(description));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code PortfolioItemSummary}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<PortfolioItemSummary>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal StandardId id_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal PortfolioItemType portfolioItemType_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal ProductType productType_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal ISet<Currency> currencies_Renamed = ImmutableSet.of();
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal string description_Renamed;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(PortfolioItemSummary beanToCopy)
		{
		  this.id_Renamed = beanToCopy.id;
		  this.portfolioItemType_Renamed = beanToCopy.PortfolioItemType;
		  this.productType_Renamed = beanToCopy.ProductType;
		  this.currencies_Renamed = beanToCopy.Currencies;
		  this.description_Renamed = beanToCopy.Description;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  return id_Renamed;
			case 1766940245: // portfolioItemType
			  return portfolioItemType_Renamed;
			case -1491615543: // productType
			  return productType_Renamed;
			case -1089470353: // currencies
			  return currencies_Renamed;
			case -1724546052: // description
			  return description_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  this.id_Renamed = (StandardId) newValue;
			  break;
			case 1766940245: // portfolioItemType
			  this.portfolioItemType_Renamed = (PortfolioItemType) newValue;
			  break;
			case -1491615543: // productType
			  this.productType_Renamed = (ProductType) newValue;
			  break;
			case -1089470353: // currencies
			  this.currencies_Renamed = (ISet<Currency>) newValue;
			  break;
			case -1724546052: // description
			  this.description_Renamed = (string) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override PortfolioItemSummary build()
		{
		  return new PortfolioItemSummary(id_Renamed, portfolioItemType_Renamed, productType_Renamed, currencies_Renamed, description_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the identifier of the item, optional. </summary>
		/// <param name="id">  the new value </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder id(StandardId id)
		{
		  this.id_Renamed = id;
		  return this;
		}

		/// <summary>
		/// Sets the type of the item. </summary>
		/// <param name="portfolioItemType">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder portfolioItemType(PortfolioItemType portfolioItemType)
		{
		  JodaBeanUtils.notNull(portfolioItemType, "portfolioItemType");
		  this.portfolioItemType_Renamed = portfolioItemType;
		  return this;
		}

		/// <summary>
		/// Sets the type of the product. </summary>
		/// <param name="productType">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder productType(ProductType productType)
		{
		  JodaBeanUtils.notNull(productType, "productType");
		  this.productType_Renamed = productType;
		  return this;
		}

		/// <summary>
		/// Sets the currencies of the item.
		/// <para>
		/// This should include the primary currencies the item is based on, not just the payment currencies.
		/// </para>
		/// </summary>
		/// <param name="currencies">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder currencies(ISet<Currency> currencies)
		{
		  JodaBeanUtils.notNull(currencies, "currencies");
		  this.currencies_Renamed = currencies;
		  return this;
		}

		/// <summary>
		/// Sets the {@code currencies} property in the builder
		/// from an array of objects. </summary>
		/// <param name="currencies">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder currencies(params Currency[] currencies)
		{
		  return this.currencies(ImmutableSet.copyOf(currencies));
		}

		/// <summary>
		/// Sets the description of the item. </summary>
		/// <param name="description">  the new value, not blank </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder description(string description)
		{
		  JodaBeanUtils.notBlank(description, "description");
		  this.description_Renamed = description;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(192);
		  buf.Append("PortfolioItemSummary.Builder{");
		  buf.Append("id").Append('=').Append(JodaBeanUtils.ToString(id_Renamed)).Append(',').Append(' ');
		  buf.Append("portfolioItemType").Append('=').Append(JodaBeanUtils.ToString(portfolioItemType_Renamed)).Append(',').Append(' ');
		  buf.Append("productType").Append('=').Append(JodaBeanUtils.ToString(productType_Renamed)).Append(',').Append(' ');
		  buf.Append("currencies").Append('=').Append(JodaBeanUtils.ToString(currencies_Renamed)).Append(',').Append(' ');
		  buf.Append("description").Append('=').Append(JodaBeanUtils.ToString(description_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}