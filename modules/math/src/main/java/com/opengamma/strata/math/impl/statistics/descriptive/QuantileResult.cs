using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.math.impl.statistics.descriptive
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using DoubleArray = com.opengamma.strata.collect.array.DoubleArray;

	/// <summary>
	/// Object describing the result from a <seealso cref="QuantileCalculationMethod"/>.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class QuantileResult implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class QuantileResult : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double value;
		private readonly double value;
	  /// <summary>
	  /// The indices of sample data used in the calculation. For discrete methods, the length is 1 and for interpolated
	  /// methods, the length is usually 2. 
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final int[] indices;
	  private readonly int[] indices;
	  /// <summary>
	  /// The weights of the sample data used in the quantitle calculation. The samples used with those weights are given
	  /// by the indices. 
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.collect.array.DoubleArray weights;
	  private readonly DoubleArray weights;

	  /// <summary>
	  /// Creates an {@code QuantileResult} from the value, the indices and the weights.
	  /// <para>
	  /// The amounts must be of the correct type, one pay and one receive.
	  /// The currencies of the payments must differ.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="value">  the quantile value </param>
	  /// <param name="indices">  the indices of the samples used in the quantile computation </param>
	  /// <param name="weights">  the weights of the samples used in the quantile computation </param>
	  /// <returns> the quantile result </returns>
	  public static QuantileResult of(double value, int[] indices, DoubleArray weights)
	  {
		return new QuantileResult(value, indices, weights);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code QuantileResult}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static QuantileResult.Meta meta()
	  {
		return QuantileResult.Meta.INSTANCE;
	  }

	  static QuantileResult()
	  {
		MetaBean.register(QuantileResult.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private QuantileResult(double value, int[] indices, DoubleArray weights)
	  {
		JodaBeanUtils.notNull(weights, "weights");
		this.value = value;
		this.indices = (indices != null ? indices.Clone() : null);
		this.weights = weights;
	  }

	  public override QuantileResult.Meta metaBean()
	  {
		return QuantileResult.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the quantile value. </summary>
	  /// <returns> the value of the property </returns>
	  public double Value
	  {
		  get
		  {
			return value;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the indices. </summary>
	  /// <returns> the value of the property </returns>
	  public int[] Indices
	  {
		  get
		  {
			return (indices != null ? indices.Clone() : null);
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the weights. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DoubleArray Weights
	  {
		  get
		  {
			return weights;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  QuantileResult other = (QuantileResult) obj;
		  return JodaBeanUtils.equal(value, other.value) && JodaBeanUtils.equal(indices, other.indices) && JodaBeanUtils.equal(weights, other.weights);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(value);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(indices);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(weights);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("QuantileResult{");
		buf.Append("value").Append('=').Append(value).Append(',').Append(' ');
		buf.Append("indices").Append('=').Append(indices).Append(',').Append(' ');
		buf.Append("weights").Append('=').Append(JodaBeanUtils.ToString(weights));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code QuantileResult}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  value_Renamed = DirectMetaProperty.ofImmutable(this, "value", typeof(QuantileResult), Double.TYPE);
			  indices_Renamed = DirectMetaProperty.ofImmutable(this, "indices", typeof(QuantileResult), typeof(int[]));
			  weights_Renamed = DirectMetaProperty.ofImmutable(this, "weights", typeof(QuantileResult), typeof(DoubleArray));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "value", "indices", "weights");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code value} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<double> value_Renamed;
		/// <summary>
		/// The meta-property for the {@code indices} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<int[]> indices_Renamed;
		/// <summary>
		/// The meta-property for the {@code weights} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<DoubleArray> weights_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "value", "indices", "weights");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 111972721: // value
			  return value_Renamed;
			case 1943391143: // indices
			  return indices_Renamed;
			case 1230441723: // weights
			  return weights_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends QuantileResult> builder()
		public override BeanBuilder<QuantileResult> builder()
		{
		  return new QuantileResult.Builder();
		}

		public override Type beanType()
		{
		  return typeof(QuantileResult);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code value} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<double> value()
		{
		  return value_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code indices} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<int[]> indices()
		{
		  return indices_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code weights} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<DoubleArray> weights()
		{
		  return weights_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 111972721: // value
			  return ((QuantileResult) bean).Value;
			case 1943391143: // indices
			  return ((QuantileResult) bean).Indices;
			case 1230441723: // weights
			  return ((QuantileResult) bean).Weights;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code QuantileResult}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<QuantileResult>
	  {

		internal double value;
		internal int[] indices;
		internal DoubleArray weights;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 111972721: // value
			  return value;
			case 1943391143: // indices
			  return indices;
			case 1230441723: // weights
			  return weights;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 111972721: // value
			  this.value = (double?) newValue.Value;
			  break;
			case 1943391143: // indices
			  this.indices = (int[]) newValue;
			  break;
			case 1230441723: // weights
			  this.weights = (DoubleArray) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override QuantileResult build()
		{
		  return new QuantileResult(value, indices, weights);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("QuantileResult.Builder{");
		  buf.Append("value").Append('=').Append(JodaBeanUtils.ToString(value)).Append(',').Append(' ');
		  buf.Append("indices").Append('=').Append(JodaBeanUtils.ToString(indices)).Append(',').Append(' ');
		  buf.Append("weights").Append('=').Append(JodaBeanUtils.ToString(weights));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}