using System;

/*
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.math.impl.integration
{

	using ArgChecker = com.opengamma.strata.collect.ArgChecker;

	/// <summary>
	/// Gauss-Hermite quadrature approximates the value of integrals of the form
	/// $$
	/// \begin{align*}
	/// \int_{-\infty}^{\infty} e^{-x^2} g(x) dx
	/// \end{align*}
	/// $$
	/// The weights and abscissas are generated by <seealso cref="GaussHermiteWeightAndAbscissaFunction"/>. 
	/// <para>
	/// At present, this integrator can only be used for the limits $\pm\infty$. The
	/// function to integrate is scaled in such a way as to allow any values for the
	/// limits of integration.
	/// </para>
	/// </summary>
	public class GaussHermiteQuadratureIntegrator1D : GaussianQuadratureIntegrator1D
	{

	  private static readonly double?[] LIMITS = new double?[] {double.NegativeInfinity, double.PositiveInfinity};
	  private static readonly GaussHermiteWeightAndAbscissaFunction GENERATOR = new GaussHermiteWeightAndAbscissaFunction();

	  /// <param name="n"> The number of sample points to use in the integration </param>
	  public GaussHermiteQuadratureIntegrator1D(int n) : base(n, GENERATOR)
	  {
	  }

	  /// <summary>
	  /// {@inheritDoc}
	  /// </summary>
	  public override double?[] Limits
	  {
		  get
		  {
			return LIMITS;
		  }
	  }

	  /// <summary>
	  /// {@inheritDoc}
	  /// The function $f(x)$ that is to be integrated is transformed into a form
	  /// suitable for this quadrature method using:
	  /// $$
	  /// \begin{align*}
	  /// \int_{-\infty}^{\infty} f(x) dx
	  /// &= \int_{-\infty}^{\infty} f(x) e^{x^2} e^{-x^2} dx\\
	  /// &= \int_{-\infty}^{\infty} g(x) e^{-x^2} dx
	  /// \end{align*} 
	  /// $$ </summary>
	  /// <exception cref="UnsupportedOperationException"> If the lower limit is not $-\infty$ or the upper limit is not $\infty$ </exception>
	  public override System.Func<double, double> getIntegralFunction(System.Func<double, double> function, double? lower, double? upper)
	  {
		ArgChecker.notNull(function, "function");
		ArgChecker.notNull(lower, "lower");
		ArgChecker.notNull(upper, "upper");
		if (lower.Equals(LIMITS[0]) && upper.Equals(LIMITS[1]))
		{
		  return (double? x) =>
		  {
	  return Math.Exp(x * x) * function(x);
		  };
		}
		throw new System.NotSupportedException("Limits for this integration method are +/-infinity");
	  }

	}

}