using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ReferenceData = com.opengamma.strata.basics.ReferenceData;
	using DoubleArray = com.opengamma.strata.collect.array.DoubleArray;
	using MarketDataBox = com.opengamma.strata.data.scenario.MarketDataBox;
	using ScenarioPerturbation = com.opengamma.strata.data.scenario.ScenarioPerturbation;

	/// <summary>
	/// A perturbation that applies different shifts to a double value.
	/// <para>
	/// This class contains shifts, each of which is associated with a scenario and applied to a value based on the shift type.
	/// A constant spread can be added for all of the scenarios. 
	/// </para>
	/// <para>
	/// A typical application of this is to generate scenario perturbation to market quotes, 
	/// where the market quote is represented in terms of {@code QuoteId} and {@code Double}.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private", constructorScope = "package") public final class GenericDoubleShifts implements com.opengamma.strata.data.scenario.ScenarioPerturbation<double>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class GenericDoubleShifts : ScenarioPerturbation<double>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ShiftType shiftType;
		private readonly ShiftType shiftType;

	  /// <summary>
	  /// The shifts to apply to a {@code Double} value.
	  /// <para>
	  /// Each element in the array corresponds to each scenario.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.collect.array.DoubleArray shiftAmount;
	  private readonly DoubleArray shiftAmount;

	  /// <summary>
	  /// The constant spread.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final double spread;
	  private readonly double spread;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates an instance with zero spread. 
	  /// </summary>
	  /// <param name="shiftType">  the shift type </param>
	  /// <param name="shiftAmount">  the shift amount </param>
	  /// <returns> the instance </returns>
	  public static GenericDoubleShifts of(ShiftType shiftType, DoubleArray shiftAmount)
	  {
		return new GenericDoubleShifts(shiftType, shiftAmount, 0d);
	  }

	  /// <summary>
	  /// Creates an instance with spread.
	  /// </summary>
	  /// <param name="shiftType">  the shift type </param>
	  /// <param name="shiftAmount">  the shift amount </param>
	  /// <param name="spread">  the spread </param>
	  /// <returns> the instance </returns>
	  public static GenericDoubleShifts of(ShiftType shiftType, DoubleArray shiftAmount, double spread)
	  {
		return new GenericDoubleShifts(shiftType, shiftAmount, spread);
	  }

	  //-------------------------------------------------------------------------
	  public MarketDataBox<double> applyTo(MarketDataBox<double> marketData, ReferenceData refData)
	  {
		return marketData.mapWithIndex(ScenarioCount, (value, scenarioIndex) => shiftType.applyShift(value + spread, shiftAmount.get(scenarioIndex)) - spread);
	  }

	  public int ScenarioCount
	  {
		  get
		  {
			return shiftAmount.size();
		  }
	  }

	  public Type<double> MarketDataType
	  {
		  get
		  {
			return typeof(Double);
		  }
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code GenericDoubleShifts}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static GenericDoubleShifts.Meta meta()
	  {
		return GenericDoubleShifts.Meta.INSTANCE;
	  }

	  static GenericDoubleShifts()
	  {
		MetaBean.register(GenericDoubleShifts.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="shiftType">  the value of the property, not null </param>
	  /// <param name="shiftAmount">  the value of the property, not null </param>
	  /// <param name="spread">  the value of the property, not null </param>
	  internal GenericDoubleShifts(ShiftType shiftType, DoubleArray shiftAmount, double spread)
	  {
		JodaBeanUtils.notNull(shiftType, "shiftType");
		JodaBeanUtils.notNull(shiftAmount, "shiftAmount");
		JodaBeanUtils.notNull(spread, "spread");
		this.shiftType = shiftType;
		this.shiftAmount = shiftAmount;
		this.spread = spread;
	  }

	  public override GenericDoubleShifts.Meta metaBean()
	  {
		return GenericDoubleShifts.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the type of shift applied to a {@code Double} value. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ShiftType ShiftType
	  {
		  get
		  {
			return shiftType;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the shifts to apply to a {@code Double} value.
	  /// <para>
	  /// Each element in the array corresponds to each scenario.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DoubleArray ShiftAmount
	  {
		  get
		  {
			return shiftAmount;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the constant spread. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public double Spread
	  {
		  get
		  {
			return spread;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  GenericDoubleShifts other = (GenericDoubleShifts) obj;
		  return JodaBeanUtils.equal(shiftType, other.shiftType) && JodaBeanUtils.equal(shiftAmount, other.shiftAmount) && JodaBeanUtils.equal(spread, other.spread);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(shiftType);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(shiftAmount);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(spread);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("GenericDoubleShifts{");
		buf.Append("shiftType").Append('=').Append(shiftType).Append(',').Append(' ');
		buf.Append("shiftAmount").Append('=').Append(shiftAmount).Append(',').Append(' ');
		buf.Append("spread").Append('=').Append(JodaBeanUtils.ToString(spread));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code GenericDoubleShifts}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  shiftType_Renamed = DirectMetaProperty.ofImmutable(this, "shiftType", typeof(GenericDoubleShifts), typeof(ShiftType));
			  shiftAmount_Renamed = DirectMetaProperty.ofImmutable(this, "shiftAmount", typeof(GenericDoubleShifts), typeof(DoubleArray));
			  spread_Renamed = DirectMetaProperty.ofImmutable(this, "spread", typeof(GenericDoubleShifts), Double.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "shiftType", "shiftAmount", "spread");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code shiftType} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ShiftType> shiftType_Renamed;
		/// <summary>
		/// The meta-property for the {@code shiftAmount} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<DoubleArray> shiftAmount_Renamed;
		/// <summary>
		/// The meta-property for the {@code spread} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<double> spread_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "shiftType", "shiftAmount", "spread");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 893345500: // shiftType
			  return shiftType_Renamed;
			case -1043480710: // shiftAmount
			  return shiftAmount_Renamed;
			case -895684237: // spread
			  return spread_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends GenericDoubleShifts> builder()
		public override BeanBuilder<GenericDoubleShifts> builder()
		{
		  return new GenericDoubleShifts.Builder();
		}

		public override Type beanType()
		{
		  return typeof(GenericDoubleShifts);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code shiftType} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ShiftType> shiftType()
		{
		  return shiftType_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code shiftAmount} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<DoubleArray> shiftAmount()
		{
		  return shiftAmount_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code spread} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<double> spread()
		{
		  return spread_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 893345500: // shiftType
			  return ((GenericDoubleShifts) bean).ShiftType;
			case -1043480710: // shiftAmount
			  return ((GenericDoubleShifts) bean).ShiftAmount;
			case -895684237: // spread
			  return ((GenericDoubleShifts) bean).Spread;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code GenericDoubleShifts}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<GenericDoubleShifts>
	  {

		internal ShiftType shiftType;
		internal DoubleArray shiftAmount;
		internal double spread;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 893345500: // shiftType
			  return shiftType;
			case -1043480710: // shiftAmount
			  return shiftAmount;
			case -895684237: // spread
			  return spread;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 893345500: // shiftType
			  this.shiftType = (ShiftType) newValue;
			  break;
			case -1043480710: // shiftAmount
			  this.shiftAmount = (DoubleArray) newValue;
			  break;
			case -895684237: // spread
			  this.spread = (double?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override GenericDoubleShifts build()
		{
		  return new GenericDoubleShifts(shiftType, shiftAmount, spread);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("GenericDoubleShifts.Builder{");
		  buf.Append("shiftType").Append('=').Append(JodaBeanUtils.ToString(shiftType)).Append(',').Append(' ');
		  buf.Append("shiftAmount").Append('=').Append(JodaBeanUtils.ToString(shiftAmount)).Append(',').Append(' ');
		  buf.Append("spread").Append('=').Append(JodaBeanUtils.ToString(spread));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}