using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.amount
{
//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static com.opengamma.strata.collect.Guavate.toImmutableList;


	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using Currency = com.opengamma.strata.basics.currency.Currency;
	using FxConvertible = com.opengamma.strata.basics.currency.FxConvertible;
	using FxRateProvider = com.opengamma.strata.basics.currency.FxRateProvider;

	/// <summary>
	/// A collection of leg amounts.
	/// <para>
	/// Contains a list of individual <seealso cref="LegAmount leg amount"/> objects, each representing an
	/// amount associated with one leg of an instrument. The order of the list is expected to be the
	/// same as the order in which the legs are defined on the instrument.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class LegAmounts implements com.opengamma.strata.basics.currency.FxConvertible<LegAmounts>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class LegAmounts : FxConvertible<LegAmounts>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<LegAmount> amounts;
		private readonly ImmutableList<LegAmount> amounts;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Returns an instance containing the specified leg amounts.
	  /// </summary>
	  /// <param name="amounts">  the individual leg amounts </param>
	  /// <returns> an instance containing the specified leg amounts </returns>
	  public static LegAmounts of(IList<LegAmount> amounts)
	  {
		return new LegAmounts(amounts);
	  }

	  /// <summary>
	  /// Returns an instance containing the specified leg amounts.
	  /// </summary>
	  /// <param name="amounts">  the individual leg amounts </param>
	  /// <returns> an instance containing the specified leg amounts </returns>
	  public static LegAmounts of(params LegAmount[] amounts)
	  {
		return new LegAmounts(ImmutableList.copyOf(amounts));
	  }

	  public LegAmounts convertedTo(Currency resultCurrency, FxRateProvider rateProvider)
	  {
//JAVA TO C# CONVERTER TODO TASK: Most Java stream collectors are not converted by Java to C# Converter:
		IList<LegAmount> convertedAmounts = amounts.Select(amount => amount.convertedTo(resultCurrency, rateProvider)).collect(toImmutableList());

		return of(convertedAmounts);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code LegAmounts}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static LegAmounts.Meta meta()
	  {
		return LegAmounts.Meta.INSTANCE;
	  }

	  static LegAmounts()
	  {
		MetaBean.register(LegAmounts.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private LegAmounts(IList<LegAmount> amounts)
	  {
		JodaBeanUtils.notNull(amounts, "amounts");
		this.amounts = ImmutableList.copyOf(amounts);
	  }

	  public override LegAmounts.Meta metaBean()
	  {
		return LegAmounts.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the leg amounts. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<LegAmount> Amounts
	  {
		  get
		  {
			return amounts;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  LegAmounts other = (LegAmounts) obj;
		  return JodaBeanUtils.equal(amounts, other.amounts);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(amounts);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("LegAmounts{");
		buf.Append("amounts").Append('=').Append(JodaBeanUtils.ToString(amounts));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code LegAmounts}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  amounts_Renamed = DirectMetaProperty.ofImmutable(this, "amounts", typeof(LegAmounts), (Type) typeof(ImmutableList));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "amounts");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code amounts} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableList<LegAmount>> amounts = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "amounts", LegAmounts.class, (Class) com.google.common.collect.ImmutableList.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ImmutableList<LegAmount>> amounts_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "amounts");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -879772901: // amounts
			  return amounts_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends LegAmounts> builder()
		public override BeanBuilder<LegAmounts> builder()
		{
		  return new LegAmounts.Builder();
		}

		public override Type beanType()
		{
		  return typeof(LegAmounts);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code amounts} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ImmutableList<LegAmount>> amounts()
		{
		  return amounts_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -879772901: // amounts
			  return ((LegAmounts) bean).Amounts;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code LegAmounts}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<LegAmounts>
	  {

		internal IList<LegAmount> amounts = ImmutableList.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -879772901: // amounts
			  return amounts;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -879772901: // amounts
			  this.amounts = (IList<LegAmount>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override LegAmounts build()
		{
		  return new LegAmounts(amounts);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("LegAmounts.Builder{");
		  buf.Append("amounts").Append('=').Append(JodaBeanUtils.ToString(amounts));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}