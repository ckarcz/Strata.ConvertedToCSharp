using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.observable
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using StandardId = com.opengamma.strata.basics.StandardId;

	/// <summary>
	/// Legal entity information.
	/// <para>
	/// This stores the information on a legal entity. 
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class LegalEntityInformation implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class LegalEntityInformation : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.StandardId legalEntityId;
		private readonly StandardId legalEntityId;
	  /// <summary>
	  /// Whether the legal entity has defaulted or not.
	  /// <para>
	  /// True if defaulted, false otherwise.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final boolean defaulted;
	  private readonly bool defaulted;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates an instance for a legal entity which has defaulted.
	  /// </summary>
	  /// <param name="legalEntityId">  the legal entity ID </param>
	  /// <returns> the instance </returns>
	  public static LegalEntityInformation isDefaulted(StandardId legalEntityId)
	  {
		return new LegalEntityInformation(legalEntityId, true);
	  }

	  /// <summary>
	  /// Creates an instance for a legal entity which has not defaulted.
	  /// </summary>
	  /// <param name="legalEntityId">  the legal entity </param>
	  /// <returns> the instance </returns>
	  public static LegalEntityInformation isNotDefaulted(StandardId legalEntityId)
	  {
		return new LegalEntityInformation(legalEntityId, false);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code LegalEntityInformation}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static LegalEntityInformation.Meta meta()
	  {
		return LegalEntityInformation.Meta.INSTANCE;
	  }

	  static LegalEntityInformation()
	  {
		MetaBean.register(LegalEntityInformation.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private LegalEntityInformation(StandardId legalEntityId, bool defaulted)
	  {
		JodaBeanUtils.notNull(legalEntityId, "legalEntityId");
		JodaBeanUtils.notNull(defaulted, "defaulted");
		this.legalEntityId = legalEntityId;
		this.defaulted = defaulted;
	  }

	  public override LegalEntityInformation.Meta metaBean()
	  {
		return LegalEntityInformation.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the legal entity identifier. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public StandardId LegalEntityId
	  {
		  get
		  {
			return legalEntityId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets whether the legal entity has defaulted or not.
	  /// <para>
	  /// True if defaulted, false otherwise.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public bool Defaulted
	  {
		  get
		  {
			return defaulted;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  LegalEntityInformation other = (LegalEntityInformation) obj;
		  return JodaBeanUtils.equal(legalEntityId, other.legalEntityId) && (defaulted == other.defaulted);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(legalEntityId);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(defaulted);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("LegalEntityInformation{");
		buf.Append("legalEntityId").Append('=').Append(legalEntityId).Append(',').Append(' ');
		buf.Append("defaulted").Append('=').Append(JodaBeanUtils.ToString(defaulted));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code LegalEntityInformation}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  legalEntityId_Renamed = DirectMetaProperty.ofImmutable(this, "legalEntityId", typeof(LegalEntityInformation), typeof(StandardId));
			  defaulted_Renamed = DirectMetaProperty.ofImmutable(this, "defaulted", typeof(LegalEntityInformation), Boolean.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "legalEntityId", "defaulted");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code legalEntityId} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<StandardId> legalEntityId_Renamed;
		/// <summary>
		/// The meta-property for the {@code defaulted} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<bool> defaulted_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "legalEntityId", "defaulted");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return legalEntityId_Renamed;
			case -1502128480: // defaulted
			  return defaulted_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends LegalEntityInformation> builder()
		public override BeanBuilder<LegalEntityInformation> builder()
		{
		  return new LegalEntityInformation.Builder();
		}

		public override Type beanType()
		{
		  return typeof(LegalEntityInformation);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code legalEntityId} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<StandardId> legalEntityId()
		{
		  return legalEntityId_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code defaulted} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<bool> defaulted()
		{
		  return defaulted_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return ((LegalEntityInformation) bean).LegalEntityId;
			case -1502128480: // defaulted
			  return ((LegalEntityInformation) bean).Defaulted;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code LegalEntityInformation}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<LegalEntityInformation>
	  {

		internal StandardId legalEntityId;
		internal bool defaulted;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  return legalEntityId;
			case -1502128480: // defaulted
			  return defaulted;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 866287159: // legalEntityId
			  this.legalEntityId = (StandardId) newValue;
			  break;
			case -1502128480: // defaulted
			  this.defaulted = (bool?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override LegalEntityInformation build()
		{
		  return new LegalEntityInformation(legalEntityId, defaulted);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("LegalEntityInformation.Builder{");
		  buf.Append("legalEntityId").Append('=').Append(JodaBeanUtils.ToString(legalEntityId)).Append(',').Append(' ');
		  buf.Append("defaulted").Append('=').Append(JodaBeanUtils.ToString(defaulted));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------

	}

}