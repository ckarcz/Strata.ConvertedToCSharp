using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.observable
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// A quoted value for a given security, such as an equity or future.
	/// <para>
	/// This represents a single numeric value of a given security, such as the mid point between the buy/sell.
	/// The <seealso cref="QuoteId"/> specifies the security, the type of price and the price source.
	/// </para>
	/// <para>
	/// This class is immutable and thread-safe.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class Quote implements org.joda.beans.ImmutableBean
	public sealed class Quote : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final QuoteId quoteId;
		private readonly QuoteId quoteId;
	  /// <summary>
	  /// The value that was quoted.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final double value;
	  private readonly double value;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from the quote identifier and value.
	  /// </summary>
	  /// <param name="quoteId">  the quote identifier </param>
	  /// <param name="value">  the value for the given quote </param>
	  /// <returns> the quote instance for the given values </returns>
	  public static Quote of(QuoteId quoteId, double value)
	  {
		return new Quote(quoteId, value);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code Quote}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static Quote.Meta meta()
	  {
		return Quote.Meta.INSTANCE;
	  }

	  static Quote()
	  {
		MetaBean.register(Quote.Meta.INSTANCE);
	  }

	  private Quote(QuoteId quoteId, double value)
	  {
		JodaBeanUtils.notNull(quoteId, "quoteId");
		JodaBeanUtils.notNull(value, "value");
		this.quoteId = quoteId;
		this.value = value;
	  }

	  public override Quote.Meta metaBean()
	  {
		return Quote.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the identifier of the quoted value. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public QuoteId QuoteId
	  {
		  get
		  {
			return quoteId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the value that was quoted. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public double Value
	  {
		  get
		  {
			return value;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  Quote other = (Quote) obj;
		  return JodaBeanUtils.equal(quoteId, other.quoteId) && JodaBeanUtils.equal(value, other.value);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(quoteId);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(value);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("Quote{");
		buf.Append("quoteId").Append('=').Append(quoteId).Append(',').Append(' ');
		buf.Append("value").Append('=').Append(JodaBeanUtils.ToString(value));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code Quote}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  quoteId_Renamed = DirectMetaProperty.ofImmutable(this, "quoteId", typeof(Quote), typeof(QuoteId));
			  value_Renamed = DirectMetaProperty.ofImmutable(this, "value", typeof(Quote), Double.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "quoteId", "value");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code quoteId} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<QuoteId> quoteId_Renamed;
		/// <summary>
		/// The meta-property for the {@code value} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<double> value_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "quoteId", "value");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 664377527: // quoteId
			  return quoteId_Renamed;
			case 111972721: // value
			  return value_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends Quote> builder()
		public override BeanBuilder<Quote> builder()
		{
		  return new Quote.Builder();
		}

		public override Type beanType()
		{
		  return typeof(Quote);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code quoteId} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<QuoteId> quoteId()
		{
		  return quoteId_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code value} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<double> value()
		{
		  return value_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 664377527: // quoteId
			  return ((Quote) bean).QuoteId;
			case 111972721: // value
			  return ((Quote) bean).Value;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code Quote}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<Quote>
	  {

		internal QuoteId quoteId;
		internal double value;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 664377527: // quoteId
			  return quoteId;
			case 111972721: // value
			  return value;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 664377527: // quoteId
			  this.quoteId = (QuoteId) newValue;
			  break;
			case 111972721: // value
			  this.value = (double?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Quote build()
		{
		  return new Quote(quoteId, value);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("Quote.Builder{");
		  buf.Append("quoteId").Append('=').Append(JodaBeanUtils.ToString(quoteId)).Append(',').Append(' ');
		  buf.Append("value").Append('=').Append(JodaBeanUtils.ToString(value));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}