using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.curve
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ParameterMetadata = com.opengamma.strata.market.param.ParameterMetadata;

	/// <summary>
	/// Simple parameter metadata containing the x value and type.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class SimpleCurveParameterMetadata implements com.opengamma.strata.market.param.ParameterMetadata, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class SimpleCurveParameterMetadata : ParameterMetadata, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.market.ValueType xValueType;
		private readonly ValueType xValueType;
	  /// <summary>
	  /// The x-value.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double xValue;
	  private readonly double xValue;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance specifying information about the x-value.
	  /// </summary>
	  /// <param name="xValueType">  the x-value type </param>
	  /// <param name="xValue">  the x-value </param>
	  /// <returns> the parameter metadata based on the date and label </returns>
	  public static SimpleCurveParameterMetadata of(ValueType xValueType, double xValue)
	  {
		return new SimpleCurveParameterMetadata(xValueType, xValue);
	  }

	  //-------------------------------------------------------------------------
	  public string Label
	  {
		  get
		  {
			return xValueType + "=" + xValue;
		  }
	  }

	  public string Identifier
	  {
		  get
		  {
			return Label;
		  }
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code SimpleCurveParameterMetadata}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static SimpleCurveParameterMetadata.Meta meta()
	  {
		return SimpleCurveParameterMetadata.Meta.INSTANCE;
	  }

	  static SimpleCurveParameterMetadata()
	  {
		MetaBean.register(SimpleCurveParameterMetadata.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private SimpleCurveParameterMetadata(ValueType xValueType, double xValue)
	  {
		JodaBeanUtils.notNull(xValueType, "xValueType");
		this.xValueType = xValueType;
		this.xValue = xValue;
	  }

	  public override SimpleCurveParameterMetadata.Meta metaBean()
	  {
		return SimpleCurveParameterMetadata.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the type of the x-value. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ValueType XValueType
	  {
		  get
		  {
			return xValueType;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the x-value. </summary>
	  /// <returns> the value of the property </returns>
	  public double XValue
	  {
		  get
		  {
			return xValue;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  SimpleCurveParameterMetadata other = (SimpleCurveParameterMetadata) obj;
		  return JodaBeanUtils.equal(xValueType, other.xValueType) && JodaBeanUtils.equal(xValue, other.xValue);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(xValueType);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(xValue);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("SimpleCurveParameterMetadata{");
		buf.Append("xValueType").Append('=').Append(xValueType).Append(',').Append(' ');
		buf.Append("xValue").Append('=').Append(JodaBeanUtils.ToString(xValue));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code SimpleCurveParameterMetadata}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  xValueType_Renamed = DirectMetaProperty.ofImmutable(this, "xValueType", typeof(SimpleCurveParameterMetadata), typeof(ValueType));
			  xValue_Renamed = DirectMetaProperty.ofImmutable(this, "xValue", typeof(SimpleCurveParameterMetadata), Double.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "xValueType", "xValue");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code xValueType} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ValueType> xValueType_Renamed;
		/// <summary>
		/// The meta-property for the {@code xValue} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<double> xValue_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "xValueType", "xValue");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -868509005: // xValueType
			  return xValueType_Renamed;
			case -777049127: // xValue
			  return xValue_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends SimpleCurveParameterMetadata> builder()
		public override BeanBuilder<SimpleCurveParameterMetadata> builder()
		{
		  return new SimpleCurveParameterMetadata.Builder();
		}

		public override Type beanType()
		{
		  return typeof(SimpleCurveParameterMetadata);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code xValueType} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ValueType> xValueType()
		{
		  return xValueType_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code xValue} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<double> xValue()
		{
		  return xValue_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -868509005: // xValueType
			  return ((SimpleCurveParameterMetadata) bean).XValueType;
			case -777049127: // xValue
			  return ((SimpleCurveParameterMetadata) bean).XValue;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code SimpleCurveParameterMetadata}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<SimpleCurveParameterMetadata>
	  {

		internal ValueType xValueType;
		internal double xValue;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -868509005: // xValueType
			  return xValueType;
			case -777049127: // xValue
			  return xValue;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -868509005: // xValueType
			  this.xValueType = (ValueType) newValue;
			  break;
			case -777049127: // xValue
			  this.xValue = (double?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override SimpleCurveParameterMetadata build()
		{
		  return new SimpleCurveParameterMetadata(xValueType, xValue);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("SimpleCurveParameterMetadata.Builder{");
		  buf.Append("xValueType").Append('=').Append(JodaBeanUtils.ToString(xValueType)).Append(',').Append(' ');
		  buf.Append("xValue").Append('=').Append(JodaBeanUtils.ToString(xValue));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}