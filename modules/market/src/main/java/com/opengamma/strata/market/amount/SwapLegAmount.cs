using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.amount
{

	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using Currency = com.opengamma.strata.basics.currency.Currency;
	using CurrencyAmount = com.opengamma.strata.basics.currency.CurrencyAmount;
	using FxRateProvider = com.opengamma.strata.basics.currency.FxRateProvider;
	using PayReceive = com.opengamma.strata.product.common.PayReceive;
	using ResolvedSwapLeg = com.opengamma.strata.product.swap.ResolvedSwapLeg;
	using SwapLegType = com.opengamma.strata.product.swap.SwapLegType;

	/// <summary>
	/// Represents an amount associated with one leg of a swap.
	/// <para>
	/// The amount is supplemented with details which would typically identify the swap leg.
	/// These are useful in order to interpret the amount without reference to the full product.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class SwapLegAmount implements LegAmount, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class SwapLegAmount : LegAmount, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final com.opengamma.strata.basics.currency.CurrencyAmount amount;
		private readonly CurrencyAmount amount;
	  /// <summary>
	  /// Whether the leg is pay or receive.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.product.common.PayReceive payReceive;
	  private readonly PayReceive payReceive;
	  /// <summary>
	  /// The type of the leg, such as Fixed or Ibor.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.product.swap.SwapLegType type;
	  private readonly SwapLegType type;
	  /// <summary>
	  /// The currency of the leg.
	  /// This is not be affected by any currency conversion applied to the amount.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.currency.Currency currency;
	  private readonly Currency currency;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from a swap leg and amount.
	  /// </summary>
	  /// <param name="leg">  the swap leg </param>
	  /// <param name="amount">  the amount </param>
	  /// <returns> the swap leg amount </returns>
	  public static SwapLegAmount of(ResolvedSwapLeg leg, CurrencyAmount amount)
	  {
		return builder().amount(amount).payReceive(leg.PayReceive).type(leg.Type).currency(leg.Currency).build();
	  }

	  //-------------------------------------------------------------------------
	  public override SwapLegAmount convertedTo(Currency resultCurrency, FxRateProvider rateProvider)
	  {
		CurrencyAmount convertedAmount = amount.convertedTo(resultCurrency, rateProvider);
		return this.toBuilder().amount(convertedAmount).build();
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code SwapLegAmount}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static SwapLegAmount.Meta meta()
	  {
		return SwapLegAmount.Meta.INSTANCE;
	  }

	  static SwapLegAmount()
	  {
		MetaBean.register(SwapLegAmount.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static SwapLegAmount.Builder builder()
	  {
		return new SwapLegAmount.Builder();
	  }

	  private SwapLegAmount(CurrencyAmount amount, PayReceive payReceive, SwapLegType type, Currency currency)
	  {
		JodaBeanUtils.notNull(amount, "amount");
		JodaBeanUtils.notNull(payReceive, "payReceive");
		JodaBeanUtils.notNull(type, "type");
		JodaBeanUtils.notNull(currency, "currency");
		this.amount = amount;
		this.payReceive = payReceive;
		this.type = type;
		this.currency = currency;
	  }

	  public override SwapLegAmount.Meta metaBean()
	  {
		return SwapLegAmount.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the amount associated with the leg.
	  /// The meaning associated with this amount is implied by the context.
	  /// This amount may have been currency converted. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurrencyAmount Amount
	  {
		  get
		  {
			return amount;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets whether the leg is pay or receive. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PayReceive PayReceive
	  {
		  get
		  {
			return payReceive;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the type of the leg, such as Fixed or Ibor. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public SwapLegType Type
	  {
		  get
		  {
			return type;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the currency of the leg.
	  /// This is not be affected by any currency conversion applied to the amount. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public Currency Currency
	  {
		  get
		  {
			return currency;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  SwapLegAmount other = (SwapLegAmount) obj;
		  return JodaBeanUtils.equal(amount, other.amount) && JodaBeanUtils.equal(payReceive, other.payReceive) && JodaBeanUtils.equal(type, other.type) && JodaBeanUtils.equal(currency, other.currency);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(amount);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(payReceive);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(type);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(currency);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(160);
		buf.Append("SwapLegAmount{");
		buf.Append("amount").Append('=').Append(amount).Append(',').Append(' ');
		buf.Append("payReceive").Append('=').Append(payReceive).Append(',').Append(' ');
		buf.Append("type").Append('=').Append(type).Append(',').Append(' ');
		buf.Append("currency").Append('=').Append(JodaBeanUtils.ToString(currency));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code SwapLegAmount}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  amount_Renamed = DirectMetaProperty.ofImmutable(this, "amount", typeof(SwapLegAmount), typeof(CurrencyAmount));
			  payReceive_Renamed = DirectMetaProperty.ofImmutable(this, "payReceive", typeof(SwapLegAmount), typeof(PayReceive));
			  type_Renamed = DirectMetaProperty.ofImmutable(this, "type", typeof(SwapLegAmount), typeof(SwapLegType));
			  currency_Renamed = DirectMetaProperty.ofImmutable(this, "currency", typeof(SwapLegAmount), typeof(Currency));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "amount", "payReceive", "type", "currency");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code amount} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<CurrencyAmount> amount_Renamed;
		/// <summary>
		/// The meta-property for the {@code payReceive} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<PayReceive> payReceive_Renamed;
		/// <summary>
		/// The meta-property for the {@code type} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<SwapLegType> type_Renamed;
		/// <summary>
		/// The meta-property for the {@code currency} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<Currency> currency_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "amount", "payReceive", "type", "currency");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1413853096: // amount
			  return amount_Renamed;
			case -885469925: // payReceive
			  return payReceive_Renamed;
			case 3575610: // type
			  return type_Renamed;
			case 575402001: // currency
			  return currency_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override SwapLegAmount.Builder builder()
		{
		  return new SwapLegAmount.Builder();
		}

		public override Type beanType()
		{
		  return typeof(SwapLegAmount);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code amount} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<CurrencyAmount> amount()
		{
		  return amount_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code payReceive} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<PayReceive> payReceive()
		{
		  return payReceive_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code type} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<SwapLegType> type()
		{
		  return type_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code currency} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<Currency> currency()
		{
		  return currency_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1413853096: // amount
			  return ((SwapLegAmount) bean).Amount;
			case -885469925: // payReceive
			  return ((SwapLegAmount) bean).PayReceive;
			case 3575610: // type
			  return ((SwapLegAmount) bean).Type;
			case 575402001: // currency
			  return ((SwapLegAmount) bean).Currency;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code SwapLegAmount}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<SwapLegAmount>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal CurrencyAmount amount_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal PayReceive payReceive_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal SwapLegType type_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal Currency currency_Renamed;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(SwapLegAmount beanToCopy)
		{
		  this.amount_Renamed = beanToCopy.Amount;
		  this.payReceive_Renamed = beanToCopy.PayReceive;
		  this.type_Renamed = beanToCopy.Type;
		  this.currency_Renamed = beanToCopy.Currency;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1413853096: // amount
			  return amount_Renamed;
			case -885469925: // payReceive
			  return payReceive_Renamed;
			case 3575610: // type
			  return type_Renamed;
			case 575402001: // currency
			  return currency_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1413853096: // amount
			  this.amount_Renamed = (CurrencyAmount) newValue;
			  break;
			case -885469925: // payReceive
			  this.payReceive_Renamed = (PayReceive) newValue;
			  break;
			case 3575610: // type
			  this.type_Renamed = (SwapLegType) newValue;
			  break;
			case 575402001: // currency
			  this.currency_Renamed = (Currency) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override SwapLegAmount build()
		{
		  return new SwapLegAmount(amount_Renamed, payReceive_Renamed, type_Renamed, currency_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the amount associated with the leg.
		/// The meaning associated with this amount is implied by the context.
		/// This amount may have been currency converted. </summary>
		/// <param name="amount">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder amount(CurrencyAmount amount)
		{
		  JodaBeanUtils.notNull(amount, "amount");
		  this.amount_Renamed = amount;
		  return this;
		}

		/// <summary>
		/// Sets whether the leg is pay or receive. </summary>
		/// <param name="payReceive">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder payReceive(PayReceive payReceive)
		{
		  JodaBeanUtils.notNull(payReceive, "payReceive");
		  this.payReceive_Renamed = payReceive;
		  return this;
		}

		/// <summary>
		/// Sets the type of the leg, such as Fixed or Ibor. </summary>
		/// <param name="type">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder type(SwapLegType type)
		{
		  JodaBeanUtils.notNull(type, "type");
		  this.type_Renamed = type;
		  return this;
		}

		/// <summary>
		/// Sets the currency of the leg.
		/// This is not be affected by any currency conversion applied to the amount. </summary>
		/// <param name="currency">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder currency(Currency currency)
		{
		  JodaBeanUtils.notNull(currency, "currency");
		  this.currency_Renamed = currency;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(160);
		  buf.Append("SwapLegAmount.Builder{");
		  buf.Append("amount").Append('=').Append(JodaBeanUtils.ToString(amount_Renamed)).Append(',').Append(' ');
		  buf.Append("payReceive").Append('=').Append(JodaBeanUtils.ToString(payReceive_Renamed)).Append(',').Append(' ');
		  buf.Append("type").Append('=').Append(JodaBeanUtils.ToString(type_Renamed)).Append(',').Append(' ');
		  buf.Append("currency").Append('=').Append(JodaBeanUtils.ToString(currency_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}