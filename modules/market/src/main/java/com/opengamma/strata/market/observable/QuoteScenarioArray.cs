using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.observable
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using DoubleArray = com.opengamma.strata.collect.array.DoubleArray;
	using ScenarioArray = com.opengamma.strata.data.scenario.ScenarioArray;

	/// <summary>
	/// Container for values for an item of quoted market data in multiple scenarios.
	/// <para>
	/// This class is a more efficient alternative to storing quotes using {@code MarketDataBox.ofScenarioValues}
	/// or {@code ScenarioValuesList}.
	/// </para>
	/// <para>
	/// It stores the quote values in a primitive double array which reduces memory
	/// footprint and avoids the overhead of boxing.
	/// </para>
	/// <para>
	/// For maximum performance functions can access the array of quotes without boxing or copying via
	/// the {@code quotes} property. Functions should use a <seealso cref="QuoteScenarioArrayId"/> to request
	/// a {@code QuotesArray} from the market data container if they need direct access to the array of quotes.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class QuoteScenarioArray implements com.opengamma.strata.data.scenario.ScenarioArray<double>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class QuoteScenarioArray : ScenarioArray<double>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.collect.array.DoubleArray quotes;
		private readonly DoubleArray quotes;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance wrapping a set of quotes.
	  /// </summary>
	  /// <param name="quotes">  the quotes </param>
	  /// <returns> an instance wrapping a set of quotes </returns>
	  public static QuoteScenarioArray of(DoubleArray quotes)
	  {
		return new QuoteScenarioArray(quotes);
	  }

	  //-------------------------------------------------------------------------
	  public int ScenarioCount
	  {
		  get
		  {
			return quotes.size();
		  }
	  }

	  public double? get(int scenarioIndex)
	  {
		return quotes.get(scenarioIndex);
	  }

	  public override Stream<double> stream()
	  {
		return quotes.stream().boxed();
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code QuoteScenarioArray}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static QuoteScenarioArray.Meta meta()
	  {
		return QuoteScenarioArray.Meta.INSTANCE;
	  }

	  static QuoteScenarioArray()
	  {
		MetaBean.register(QuoteScenarioArray.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private QuoteScenarioArray(DoubleArray quotes)
	  {
		JodaBeanUtils.notNull(quotes, "quotes");
		this.quotes = quotes;
	  }

	  public override QuoteScenarioArray.Meta metaBean()
	  {
		return QuoteScenarioArray.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the values of the quotes. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DoubleArray Quotes
	  {
		  get
		  {
			return quotes;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  QuoteScenarioArray other = (QuoteScenarioArray) obj;
		  return JodaBeanUtils.equal(quotes, other.quotes);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(quotes);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("QuoteScenarioArray{");
		buf.Append("quotes").Append('=').Append(JodaBeanUtils.ToString(quotes));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code QuoteScenarioArray}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  quotes_Renamed = DirectMetaProperty.ofImmutable(this, "quotes", typeof(QuoteScenarioArray), typeof(DoubleArray));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "quotes");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code quotes} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<DoubleArray> quotes_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "quotes");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -948399753: // quotes
			  return quotes_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends QuoteScenarioArray> builder()
		public override BeanBuilder<QuoteScenarioArray> builder()
		{
		  return new QuoteScenarioArray.Builder();
		}

		public override Type beanType()
		{
		  return typeof(QuoteScenarioArray);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code quotes} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<DoubleArray> quotes()
		{
		  return quotes_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -948399753: // quotes
			  return ((QuoteScenarioArray) bean).Quotes;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code QuoteScenarioArray}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<QuoteScenarioArray>
	  {

		internal DoubleArray quotes;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -948399753: // quotes
			  return quotes;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -948399753: // quotes
			  this.quotes = (DoubleArray) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override QuoteScenarioArray build()
		{
		  return new QuoteScenarioArray(quotes);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("QuoteScenarioArray.Builder{");
		  buf.Append("quotes").Append('=').Append(JodaBeanUtils.ToString(quotes));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}