using System;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.curve
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using MarketDataId = com.opengamma.strata.data.MarketDataId;
	using ObservableSource = com.opengamma.strata.data.ObservableSource;

	/// <summary>
	/// An identifier used to access the inputs to curve calibration.
	/// <para>
	/// This is used when there is a need to obtain an instance of <seealso cref="RatesCurveInputs"/>.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", cacheHashCode = true) public final class RatesCurveInputsId implements com.opengamma.strata.data.MarketDataId<RatesCurveInputs>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class RatesCurveInputsId : MarketDataId<RatesCurveInputs>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final CurveGroupName curveGroupName;
		private readonly CurveGroupName curveGroupName;
	  /// <summary>
	  /// The curve name.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final CurveName curveName;
	  private readonly CurveName curveName;
	  /// <summary>
	  /// The source of observable market data.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.data.ObservableSource observableSource;
	  private readonly ObservableSource observableSource;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from the curve group, curve name and source of observable market data.
	  /// </summary>
	  /// <param name="groupName">  the curve group name </param>
	  /// <param name="curveName">  the curve name </param>
	  /// <param name="obsSource">  the source of observable market data </param>
	  /// <returns> the identifier </returns>
	  public static RatesCurveInputsId of(CurveGroupName groupName, CurveName curveName, ObservableSource obsSource)
	  {
		return new RatesCurveInputsId(groupName, curveName, obsSource);
	  }

	  //-------------------------------------------------------------------------
	  public Type<RatesCurveInputs> MarketDataType
	  {
		  get
		  {
			return typeof(RatesCurveInputs);
		  }
	  }

	  public override string ToString()
	  {
		return (new StringBuilder(32)).Append("RatesCurveInputsId:").Append(curveGroupName).Append('/').Append(curveName).Append(observableSource.Equals(ObservableSource.NONE) ? "" : "/" + observableSource).ToString();
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code RatesCurveInputsId}.
	  /// </summary>
	  private static readonly TypedMetaBean<RatesCurveInputsId> META_BEAN = LightMetaBean.of(typeof(RatesCurveInputsId), MethodHandles.lookup(), new string[] {"curveGroupName", "curveName", "observableSource"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code RatesCurveInputsId}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<RatesCurveInputsId> meta()
	  {
		return META_BEAN;
	  }

	  static RatesCurveInputsId()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// The cached hash code, using the racy single-check idiom.
	  /// </summary>
	  [NonSerialized]
	  private int cacheHashCode;

	  private RatesCurveInputsId(CurveGroupName curveGroupName, CurveName curveName, ObservableSource observableSource)
	  {
		JodaBeanUtils.notNull(curveGroupName, "curveGroupName");
		JodaBeanUtils.notNull(curveName, "curveName");
		JodaBeanUtils.notNull(observableSource, "observableSource");
		this.curveGroupName = curveGroupName;
		this.curveName = curveName;
		this.observableSource = observableSource;
	  }

	  public override TypedMetaBean<RatesCurveInputsId> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the curve group name. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurveGroupName CurveGroupName
	  {
		  get
		  {
			return curveGroupName;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the curve name. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurveName CurveName
	  {
		  get
		  {
			return curveName;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the source of observable market data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ObservableSource ObservableSource
	  {
		  get
		  {
			return observableSource;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  RatesCurveInputsId other = (RatesCurveInputsId) obj;
		  return JodaBeanUtils.equal(curveGroupName, other.curveGroupName) && JodaBeanUtils.equal(curveName, other.curveName) && JodaBeanUtils.equal(observableSource, other.observableSource);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = cacheHashCode;
		if (hash == 0)
		{
		  hash = this.GetType().GetHashCode();
		  hash = hash * 31 + JodaBeanUtils.GetHashCode(curveGroupName);
		  hash = hash * 31 + JodaBeanUtils.GetHashCode(curveName);
		  hash = hash * 31 + JodaBeanUtils.GetHashCode(observableSource);
		  cacheHashCode = hash;
		}
		return hash;
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}