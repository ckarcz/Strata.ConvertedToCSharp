using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.curve
{

	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using ImmutableMap = com.google.common.collect.ImmutableMap;
	using MarketDataId = com.opengamma.strata.data.MarketDataId;

	/// <summary>
	/// The input data used when calibrating a curve.
	/// <para>
	/// This class contains the current market value of a set of instruments used when calibrating a curve.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class RatesCurveInputs implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class RatesCurveInputs : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", builderType = "Map<? extends MarketDataId<?>, ?>") private final com.google.common.collect.ImmutableMap<? extends com.opengamma.strata.data.MarketDataId<?>, ?> marketData;
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		private readonly ImmutableMap<MarketDataId<object>, ?> marketData;
	  /// <summary>
	  /// The metadata for the curve.
	  /// <para>
	  /// This is used to identify the curve and the necessary pieces of market data.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final CurveMetadata curveMetadata;
	  private readonly CurveMetadata curveMetadata;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Returns a {@code CurveInputs} instance containing the specified market data.
	  /// </summary>
	  /// <param name="marketData">  a map of market data, keyed by the ID of the data </param>
	  /// <param name="metadata">  the metadata for the curve </param>
	  /// <returns> a {@code CurveInputs} instance containing the specified market data </returns>
	  public static RatesCurveInputs of<T1>(IDictionary<T1> marketData, CurveMetadata metadata) where T1 : com.opengamma.strata.data.MarketDataId<T1>
	  {
		return new RatesCurveInputs(marketData, metadata);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code RatesCurveInputs}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static RatesCurveInputs.Meta meta()
	  {
		return RatesCurveInputs.Meta.INSTANCE;
	  }

	  static RatesCurveInputs()
	  {
		MetaBean.register(RatesCurveInputs.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static RatesCurveInputs.Builder builder()
	  {
		return new RatesCurveInputs.Builder();
	  }

	  private RatesCurveInputs<T1>(IDictionary<T1> marketData, CurveMetadata curveMetadata) where T1 : com.opengamma.strata.data.MarketDataId<T1>
	  {
		JodaBeanUtils.notNull(marketData, "marketData");
		JodaBeanUtils.notNull(curveMetadata, "curveMetadata");
		this.marketData = ImmutableMap.copyOf(marketData);
		this.curveMetadata = curveMetadata;
	  }

	  public override RatesCurveInputs.Meta metaBean()
	  {
		return RatesCurveInputs.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the market data.
	  /// <para>
	  /// There will typically be at least one entry for each node on the curve.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public com.google.common.collect.ImmutableMap<? extends com.opengamma.strata.data.MarketDataId<?>, ?> getMarketData()
	  public ImmutableMap<MarketDataId<object>, ?> MarketData
	  {
		  get
		  {
			return marketData;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the metadata for the curve.
	  /// <para>
	  /// This is used to identify the curve and the necessary pieces of market data.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurveMetadata CurveMetadata
	  {
		  get
		  {
			return curveMetadata;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  RatesCurveInputs other = (RatesCurveInputs) obj;
		  return JodaBeanUtils.equal(marketData, other.marketData) && JodaBeanUtils.equal(curveMetadata, other.curveMetadata);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(marketData);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(curveMetadata);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("RatesCurveInputs{");
		buf.Append("marketData").Append('=').Append(marketData).Append(',').Append(' ');
		buf.Append("curveMetadata").Append('=').Append(JodaBeanUtils.ToString(curveMetadata));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code RatesCurveInputs}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  marketData_Renamed = DirectMetaProperty.ofImmutable(this, "marketData", typeof(RatesCurveInputs), (Type) typeof(ImmutableMap));
			  curveMetadata_Renamed = DirectMetaProperty.ofImmutable(this, "curveMetadata", typeof(RatesCurveInputs), typeof(CurveMetadata));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "marketData", "curveMetadata");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code marketData} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableMap<? extends com.opengamma.strata.data.MarketDataId<?>, ?>> marketData = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "marketData", RatesCurveInputs.class, (Class) com.google.common.collect.ImmutableMap.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		internal MetaProperty<ImmutableMap<MarketDataId<object>, ?>> marketData_Renamed;
		/// <summary>
		/// The meta-property for the {@code curveMetadata} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<CurveMetadata> curveMetadata_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "marketData", "curveMetadata");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1116764678: // marketData
			  return marketData_Renamed;
			case 278233406: // curveMetadata
			  return curveMetadata_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override RatesCurveInputs.Builder builder()
		{
		  return new RatesCurveInputs.Builder();
		}

		public override Type beanType()
		{
		  return typeof(RatesCurveInputs);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code marketData} property. </summary>
		/// <returns> the meta-property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public org.joda.beans.MetaProperty<com.google.common.collect.ImmutableMap<? extends com.opengamma.strata.data.MarketDataId<?>, ?>> marketData()
		public MetaProperty<ImmutableMap<MarketDataId<object>, ?>> marketData()
		{
		  return marketData_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code curveMetadata} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<CurveMetadata> curveMetadata()
		{
		  return curveMetadata_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1116764678: // marketData
			  return ((RatesCurveInputs) bean).MarketData;
			case 278233406: // curveMetadata
			  return ((RatesCurveInputs) bean).CurveMetadata;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code RatesCurveInputs}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<RatesCurveInputs>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private java.util.Map<? extends com.opengamma.strata.data.MarketDataId<?>, ?> marketData = com.google.common.collect.ImmutableMap.of();
		internal IDictionary<MarketDataId<object>, ?> marketData_Renamed = ImmutableMap.of();
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal CurveMetadata curveMetadata_Renamed;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(RatesCurveInputs beanToCopy)
		{
		  this.marketData_Renamed = beanToCopy.MarketData;
		  this.curveMetadata_Renamed = beanToCopy.CurveMetadata;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1116764678: // marketData
			  return marketData_Renamed;
			case 278233406: // curveMetadata
			  return curveMetadata_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1116764678: // marketData
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: this.marketData = (java.util.Map<? extends com.opengamma.strata.data.MarketDataId<?>, ?>) newValue;
			  this.marketData_Renamed = (IDictionary<MarketDataId<object>, ?>) newValue;
			  break;
			case 278233406: // curveMetadata
			  this.curveMetadata_Renamed = (CurveMetadata) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override RatesCurveInputs build()
		{
		  return new RatesCurveInputs(marketData_Renamed, curveMetadata_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the market data.
		/// <para>
		/// There will typically be at least one entry for each node on the curve.
		/// </para>
		/// </summary>
		/// <param name="marketData">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder marketData<T1>(IDictionary<T1> marketData) where T1 : com.opengamma.strata.data.MarketDataId<T1>
		{
		  JodaBeanUtils.notNull(marketData, "marketData");
		  this.marketData_Renamed = marketData;
		  return this;
		}

		/// <summary>
		/// Sets the metadata for the curve.
		/// <para>
		/// This is used to identify the curve and the necessary pieces of market data.
		/// </para>
		/// </summary>
		/// <param name="curveMetadata">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder curveMetadata(CurveMetadata curveMetadata)
		{
		  JodaBeanUtils.notNull(curveMetadata, "curveMetadata");
		  this.curveMetadata_Renamed = curveMetadata;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("RatesCurveInputs.Builder{");
		  buf.Append("marketData").Append('=').Append(JodaBeanUtils.ToString(marketData_Renamed)).Append(',').Append(' ');
		  buf.Append("curveMetadata").Append('=').Append(JodaBeanUtils.ToString(curveMetadata_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}