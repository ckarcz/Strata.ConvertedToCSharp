using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.param
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ArgChecker = com.opengamma.strata.collect.ArgChecker;
	using MarketDataName = com.opengamma.strata.data.MarketDataName;

	/// <summary>
	/// The market data name and the associated number of parameters.
	/// <para>
	/// This holds the name and the number of parameters that define it.
	/// For example, the curve name and the number of curve nodes.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class ParameterSize implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class ParameterSize : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.data.MarketDataName<?> name;
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		private readonly MarketDataName<object> name;
	  /// <summary>
	  /// The number of parameters.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero") private final int parameterCount;
	  private readonly int parameterCount;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance, specifying the name and parameter count.
	  /// </summary>
	  /// <param name="name">  the curve name </param>
	  /// <param name="parameterCount">  the parameter count </param>
	  /// <returns> the curve data </returns>
	  public static ParameterSize of<T1>(MarketDataName<T1> name, int parameterCount)
	  {
		return new ParameterSize(name, parameterCount);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code ParameterSize}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static ParameterSize.Meta meta()
	  {
		return ParameterSize.Meta.INSTANCE;
	  }

	  static ParameterSize()
	  {
		MetaBean.register(ParameterSize.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private ParameterSize<T1>(MarketDataName<T1> name, int parameterCount)
	  {
		JodaBeanUtils.notNull(name, "name");
		ArgChecker.notNegativeOrZero(parameterCount, "parameterCount");
		this.name = name;
		this.parameterCount = parameterCount;
	  }

	  public override ParameterSize.Meta metaBean()
	  {
		return ParameterSize.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the name of the market data. </summary>
	  /// <returns> the value of the property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public com.opengamma.strata.data.MarketDataName<?> getName()
	  public MarketDataName<object> Name
	  {
		  get
		  {
			return name;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the number of parameters. </summary>
	  /// <returns> the value of the property </returns>
	  public int ParameterCount
	  {
		  get
		  {
			return parameterCount;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  ParameterSize other = (ParameterSize) obj;
		  return JodaBeanUtils.equal(name, other.name) && (parameterCount == other.parameterCount);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(name);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(parameterCount);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("ParameterSize{");
		buf.Append("name").Append('=').Append(name).Append(',').Append(' ');
		buf.Append("parameterCount").Append('=').Append(JodaBeanUtils.ToString(parameterCount));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code ParameterSize}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  name_Renamed = DirectMetaProperty.ofImmutable(this, "name", typeof(ParameterSize), (Type) typeof(MarketDataName));
			  parameterCount_Renamed = DirectMetaProperty.ofImmutable(this, "parameterCount", typeof(ParameterSize), Integer.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "name", "parameterCount");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code name} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.opengamma.strata.data.MarketDataName<?>> name = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "name", ParameterSize.class, (Class) com.opengamma.strata.data.MarketDataName.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		internal MetaProperty<MarketDataName<object>> name_Renamed;
		/// <summary>
		/// The meta-property for the {@code parameterCount} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<int> parameterCount_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "name", "parameterCount");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return name_Renamed;
			case 1107332838: // parameterCount
			  return parameterCount_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends ParameterSize> builder()
		public override BeanBuilder<ParameterSize> builder()
		{
		  return new ParameterSize.Builder();
		}

		public override Type beanType()
		{
		  return typeof(ParameterSize);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code name} property. </summary>
		/// <returns> the meta-property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public org.joda.beans.MetaProperty<com.opengamma.strata.data.MarketDataName<?>> name()
		public MetaProperty<MarketDataName<object>> name()
		{
		  return name_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code parameterCount} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<int> parameterCount()
		{
		  return parameterCount_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return ((ParameterSize) bean).Name;
			case 1107332838: // parameterCount
			  return ((ParameterSize) bean).ParameterCount;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code ParameterSize}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<ParameterSize>
	  {

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private com.opengamma.strata.data.MarketDataName<?> name;
		internal MarketDataName<object> name;
		internal int parameterCount;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return name;
			case 1107332838: // parameterCount
			  return parameterCount;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: this.name = (com.opengamma.strata.data.MarketDataName<?>) newValue;
			  this.name = (MarketDataName<object>) newValue;
			  break;
			case 1107332838: // parameterCount
			  this.parameterCount = (int?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override ParameterSize build()
		{
		  return new ParameterSize(name, parameterCount);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("ParameterSize.Builder{");
		  buf.Append("name").Append('=').Append(JodaBeanUtils.ToString(name)).Append(',').Append(' ');
		  buf.Append("parameterCount").Append('=').Append(JodaBeanUtils.ToString(parameterCount));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}