using System;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.market.observable
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using StandardId = com.opengamma.strata.basics.StandardId;
	using MarketDataId = com.opengamma.strata.data.MarketDataId;

	/// <summary>
	/// Identifies the market data for legal entity information.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", cacheHashCode = true) public final class LegalEntityInformationId implements com.opengamma.strata.data.MarketDataId<LegalEntityInformation>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class LegalEntityInformationId : MarketDataId<LegalEntityInformation>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.StandardId legalEntityId;
		private readonly StandardId legalEntityId;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an identifier used to find legal entity information.
	  /// </summary>
	  /// <param name="legalEntityId">  the name </param>
	  /// <returns> an identifier </returns>
	  public static LegalEntityInformationId of(string legalEntityId)
	  {
		return new LegalEntityInformationId(StandardId.parse(legalEntityId));
	  }

	  /// <summary>
	  /// Obtains an identifier used to find legal entity information.
	  /// </summary>
	  /// <param name="legalEntityId">  the name </param>
	  /// <returns> the identifier </returns>
	  public static LegalEntityInformationId of(StandardId legalEntityId)
	  {
		return new LegalEntityInformationId(legalEntityId);
	  }

	  //-------------------------------------------------------------------------
	  public Type<LegalEntityInformation> MarketDataType
	  {
		  get
		  {
			return typeof(LegalEntityInformation);
		  }
	  }

	  public override string ToString()
	  {
		return "LegalEntityInformationId:" + legalEntityId;
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code LegalEntityInformationId}.
	  /// </summary>
	  private static readonly TypedMetaBean<LegalEntityInformationId> META_BEAN = LightMetaBean.of(typeof(LegalEntityInformationId), MethodHandles.lookup(), new string[] {"legalEntityId"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code LegalEntityInformationId}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<LegalEntityInformationId> meta()
	  {
		return META_BEAN;
	  }

	  static LegalEntityInformationId()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// The cached hash code, using the racy single-check idiom.
	  /// </summary>
	  [NonSerialized]
	  private int cacheHashCode;

	  private LegalEntityInformationId(StandardId legalEntityId)
	  {
		JodaBeanUtils.notNull(legalEntityId, "legalEntityId");
		this.legalEntityId = legalEntityId;
	  }

	  public override TypedMetaBean<LegalEntityInformationId> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the legal entity identifier. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public StandardId LegalEntityId
	  {
		  get
		  {
			return legalEntityId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  LegalEntityInformationId other = (LegalEntityInformationId) obj;
		  return JodaBeanUtils.equal(legalEntityId, other.legalEntityId);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = cacheHashCode;
		if (hash == 0)
		{
		  hash = this.GetType().GetHashCode();
		  hash = hash * 31 + JodaBeanUtils.GetHashCode(legalEntityId);
		  cacheHashCode = hash;
		}
		return hash;
	  }

	  //-------------------------- AUTOGENERATED END --------------------------

	}

}