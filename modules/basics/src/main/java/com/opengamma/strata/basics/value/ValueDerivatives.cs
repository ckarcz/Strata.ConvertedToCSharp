using System;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.value
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using DoubleArray = com.opengamma.strata.collect.array.DoubleArray;

	/// <summary>
	/// A value and its derivatives.
	/// <para>
	/// This defines a standard way to return a value and its derivatives to certain inputs.
	/// It is in particular used as a return object for Algorithmic Differentiation versions of some functions.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class ValueDerivatives implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class ValueDerivatives : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double value;
		private readonly double value;
	  /// <summary>
	  /// The derivatives of the variable with respect to some inputs.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.collect.array.DoubleArray derivatives;
	  private readonly DoubleArray derivatives;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from a value and array of derivatives.
	  /// </summary>
	  /// <param name="value">  the value </param>
	  /// <param name="derivatives">  the derivatives of the value </param>
	  /// <returns> the object </returns>
	  public static ValueDerivatives of(double value, DoubleArray derivatives)
	  {
		return new ValueDerivatives(value, derivatives);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Gets the derivative of the variable with respect to an input.
	  /// </summary>
	  /// <param name="index">  the zero-based derivative to obtain </param>
	  /// <returns> the derivative </returns>
	  /// <exception cref="IndexOutOfBoundsException"> if the index is invalid </exception>
	  public double getDerivative(int index)
	  {
		return derivatives.get(index);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code ValueDerivatives}.
	  /// </summary>
	  private static readonly TypedMetaBean<ValueDerivatives> META_BEAN = LightMetaBean.of(typeof(ValueDerivatives), MethodHandles.lookup(), new string[] {"value", "derivatives"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code ValueDerivatives}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<ValueDerivatives> meta()
	  {
		return META_BEAN;
	  }

	  static ValueDerivatives()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private ValueDerivatives(double value, DoubleArray derivatives)
	  {
		JodaBeanUtils.notNull(derivatives, "derivatives");
		this.value = value;
		this.derivatives = derivatives;
	  }

	  public override TypedMetaBean<ValueDerivatives> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the value of the variable. </summary>
	  /// <returns> the value of the property </returns>
	  public double Value
	  {
		  get
		  {
			return value;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the derivatives of the variable with respect to some inputs. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DoubleArray Derivatives
	  {
		  get
		  {
			return derivatives;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  ValueDerivatives other = (ValueDerivatives) obj;
		  return JodaBeanUtils.equal(value, other.value) && JodaBeanUtils.equal(derivatives, other.derivatives);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(value);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(derivatives);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("ValueDerivatives{");
		buf.Append("value").Append('=').Append(value).Append(',').Append(' ');
		buf.Append("derivatives").Append('=').Append(JodaBeanUtils.ToString(derivatives));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}