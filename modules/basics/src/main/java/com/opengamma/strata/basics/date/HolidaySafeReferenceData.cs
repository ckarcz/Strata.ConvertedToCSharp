using System;
using System.Text;

/*
 * Copyright (C) 2018 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.date
{


	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;
	using MinimalMetaBean = org.joda.beans.impl.direct.MinimalMetaBean;

	using ImmutableList = com.google.common.collect.ImmutableList;

	/// <summary>
	/// An instance of reference data that provides a default value for holiday calendars.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "minimal", builderScope = "private", constructorScope = "package") final class HolidaySafeReferenceData implements com.opengamma.strata.basics.ReferenceData, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class HolidaySafeReferenceData : ReferenceData, ImmutableBean
	{

	  /// <summary>
	  /// The Saturday/Sunday list. </summary>
	  private static readonly ImmutableList<DayOfWeek> WEEKEND_DAYS = ImmutableList.of(SATURDAY, SUNDAY);

	  /// <summary>
	  /// The underlying reference data.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.ReferenceData underlying;
	  private readonly ReferenceData underlying;

	  //-------------------------------------------------------------------------
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Override @SuppressWarnings("unchecked") public <T> T queryValueOrNull(com.opengamma.strata.basics.ReferenceDataId<T> id)
	  public T queryValueOrNull<T>(ReferenceDataId<T> id)
	  {
		T found = underlying.queryValueOrNull(id);
		return found == null ? tryDefaultValue(id) : found;
	  }

	  // split out for hotspot inlining
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") private <T> T tryDefaultValue(com.opengamma.strata.basics.ReferenceDataId<T> id)
	  private T tryDefaultValue<T>(ReferenceDataId<T> id)
	  {
		if (id is HolidayCalendarId)
		{
		  return (T) ImmutableHolidayCalendar.of((HolidayCalendarId) id, ImmutableList.of(), WEEKEND_DAYS);
		}
		return null;
	  }

	  public override bool containsValue<T1>(ReferenceDataId<T1> id)
	  {
		return underlying.queryValueOrNull(id) != default(T1) || id is HolidayCalendarId;
	  }

	  public override ReferenceData combinedWith(ReferenceData other)
	  {
		ReferenceData combined = underlying.combinedWith(other);
		return new HolidaySafeReferenceData(combined);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code HolidaySafeReferenceData}.
	  /// </summary>
	  private static readonly TypedMetaBean<HolidaySafeReferenceData> META_BEAN = MinimalMetaBean.of(typeof(HolidaySafeReferenceData), new string[] {"underlying"}, () => new HolidaySafeReferenceData.Builder(), b => b.Underlying);

	  /// <summary>
	  /// The meta-bean for {@code HolidaySafeReferenceData}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<HolidaySafeReferenceData> meta()
	  {
		return META_BEAN;
	  }

	  static HolidaySafeReferenceData()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="underlying">  the value of the property, not null </param>
	  internal HolidaySafeReferenceData(ReferenceData underlying)
	  {
		JodaBeanUtils.notNull(underlying, "underlying");
		this.underlying = underlying;
	  }

	  public override TypedMetaBean<HolidaySafeReferenceData> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the underlying reference data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ReferenceData Underlying
	  {
		  get
		  {
			return underlying;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  HolidaySafeReferenceData other = (HolidaySafeReferenceData) obj;
		  return JodaBeanUtils.equal(underlying, other.underlying);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(underlying);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("HolidaySafeReferenceData{");
		buf.Append("underlying").Append('=').Append(JodaBeanUtils.ToString(underlying));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code HolidaySafeReferenceData}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<HolidaySafeReferenceData>
	  {

		internal ReferenceData underlying;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1770633379: // underlying
			  return underlying;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1770633379: // underlying
			  this.underlying = (ReferenceData) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override HolidaySafeReferenceData build()
		{
		  return new HolidaySafeReferenceData(underlying);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("HolidaySafeReferenceData.Builder{");
		  buf.Append("underlying").Append('=').Append(JodaBeanUtils.ToString(underlying));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}