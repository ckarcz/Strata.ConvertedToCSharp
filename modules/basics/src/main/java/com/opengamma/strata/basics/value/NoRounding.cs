using System;
using System.Collections.Generic;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.value
{

	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// Standard implementation of {@code Rounding} that makes no changes.
	/// <para>
	/// This class implements <seealso cref="Rounding"/> to provide an instance that does not perform rounding.
	/// See <seealso cref="Rounding#none()"/>.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") final class NoRounding implements Rounding, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class NoRounding : Rounding, ImmutableBean
	{

	  /// <summary>
	  /// The 'None' rounding convention, which applies no rounding.
	  /// </summary>
	  internal static readonly NoRounding INSTANCE = new NoRounding();

	  //-------------------------------------------------------------------------
	  public double round(double value)
	  {
		return value;
	  }

	  public decimal round(decimal value)
	  {
		return value;
	  }

	  //-------------------------------------------------------------------------
	  public override string ToString()
	  {
		return "No rounding";
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code NoRounding}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static NoRounding.Meta meta()
	  {
		return NoRounding.Meta.INSTANCE;
	  }

	  static NoRounding()
	  {
		MetaBean.register(NoRounding.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private NoRounding()
	  {
	  }

	  public override NoRounding.Meta metaBean()
	  {
		return NoRounding.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  return true;
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		return hash;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code NoRounding}.
	  /// </summary>
	  internal sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null);
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null);
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends NoRounding> builder()
		public override BeanBuilder<NoRounding> builder()
		{
		  return new NoRounding.Builder();
		}

		public override Type beanType()
		{
		  return typeof(NoRounding);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code NoRounding}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<NoRounding>
	  {

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  throw new NoSuchElementException("Unknown property: " + propertyName);
		}

		public override Builder set(string propertyName, object newValue)
		{
		  throw new NoSuchElementException("Unknown property: " + propertyName);
		}

		public override NoRounding build()
		{
		  return new NoRounding();
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  return "NoRounding.Builder{}";
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}