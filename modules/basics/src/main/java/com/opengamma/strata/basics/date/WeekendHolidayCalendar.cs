using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.date
{


	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// A holiday calendar implementation that only has holidays at weekends.
	/// <para>
	/// This immutable implementation of <seealso cref="HolidayCalendar"/> determines whether
	/// a date is a business day or holiday solely by the day of week.
	/// This supports three special cases for Sat/Sun, Fri/Sat and Thu/Fri.
	/// Other combinations can be setup using <seealso cref="ImmutableHolidayCalendar"/>.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") final class WeekendHolidayCalendar implements HolidayCalendar, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class WeekendHolidayCalendar : HolidayCalendar, ImmutableBean
	{
	  // methods are overridden from default implementations to gain performance

	  /// <summary>
	  /// The singleton instance of the 'Sat/Sun' calendar.
	  /// </summary>
	  internal static readonly WeekendHolidayCalendar SAT_SUN = new WeekendHolidayCalendar(HolidayCalendarIds.SAT_SUN, SATURDAY, SUNDAY);
	  /// <summary>
	  /// The singleton instance of the 'Fri/Sat' calendar.
	  /// </summary>
	  internal static readonly WeekendHolidayCalendar FRI_SAT = new WeekendHolidayCalendar(HolidayCalendarIds.FRI_SAT, FRIDAY, SATURDAY);
	  /// <summary>
	  /// The singleton instance of the 'Thu/Fri' calendar.
	  /// </summary>
	  internal static readonly WeekendHolidayCalendar THU_FRI = new WeekendHolidayCalendar(HolidayCalendarIds.THU_FRI, THURSDAY, FRIDAY);

	  /// <summary>
	  /// The identifier.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final HolidayCalendarId id;
	  private readonly HolidayCalendarId id;
	  /// <summary>
	  /// The first weekend day.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.DayOfWeek day1;
	  private readonly DayOfWeek day1;
	  /// <summary>
	  /// The second weekend day.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.DayOfWeek day2;
	  private readonly DayOfWeek day2;

	  // resolve after deserialization
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private Object readResolve() throws java.io.InvalidObjectException
	  private object readResolve()
	  {
		if (id == HolidayCalendarIds.SAT_SUN)
		{
		  return SAT_SUN;
		}
		if (id == HolidayCalendarIds.FRI_SAT)
		{
		  return FRI_SAT;
		}
		if (id == HolidayCalendarIds.THU_FRI)
		{
		  return THU_FRI;
		}
		throw new InvalidObjectException("Invalid WeekendHolidayCalendar identifier");
	  }

	  //-------------------------------------------------------------------------
	  public bool isHoliday(LocalDate date)
	  {
		DayOfWeek dow = date.DayOfWeek;
		return dow == day1 || dow == day2;
	  }

	  //-------------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj is WeekendHolidayCalendar)
		{
		  return id.Equals(((WeekendHolidayCalendar) obj).id);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		return id.GetHashCode();
	  }

	  public override string ToString()
	  {
		return "HolidayCalendar[" + id.Name + ']';
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code WeekendHolidayCalendar}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static WeekendHolidayCalendar.Meta meta()
	  {
		return WeekendHolidayCalendar.Meta.INSTANCE;
	  }

	  static WeekendHolidayCalendar()
	  {
		MetaBean.register(WeekendHolidayCalendar.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private WeekendHolidayCalendar(HolidayCalendarId id, DayOfWeek day1, DayOfWeek day2)
	  {
		JodaBeanUtils.notNull(id, "id");
		JodaBeanUtils.notNull(day1, "day1");
		JodaBeanUtils.notNull(day2, "day2");
		this.id = id;
		this.day1 = day1;
		this.day2 = day2;
	  }

	  public override WeekendHolidayCalendar.Meta metaBean()
	  {
		return WeekendHolidayCalendar.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the identifier. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public HolidayCalendarId Id
	  {
		  get
		  {
			return id;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the first weekend day. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DayOfWeek Day1
	  {
		  get
		  {
			return day1;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the second weekend day. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public DayOfWeek Day2
	  {
		  get
		  {
			return day2;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code WeekendHolidayCalendar}.
	  /// </summary>
	  internal sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  id_Renamed = DirectMetaProperty.ofImmutable(this, "id", typeof(WeekendHolidayCalendar), typeof(HolidayCalendarId));
			  day1_Renamed = DirectMetaProperty.ofImmutable(this, "day1", typeof(WeekendHolidayCalendar), typeof(DayOfWeek));
			  day2_Renamed = DirectMetaProperty.ofImmutable(this, "day2", typeof(WeekendHolidayCalendar), typeof(DayOfWeek));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "id", "day1", "day2");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code id} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<HolidayCalendarId> id_Renamed;
		/// <summary>
		/// The meta-property for the {@code day1} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<DayOfWeek> day1_Renamed;
		/// <summary>
		/// The meta-property for the {@code day2} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<DayOfWeek> day2_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "id", "day1", "day2");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  return id_Renamed;
			case 3076117: // day1
			  return day1_Renamed;
			case 3076118: // day2
			  return day2_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends WeekendHolidayCalendar> builder()
		public override BeanBuilder<WeekendHolidayCalendar> builder()
		{
		  return new WeekendHolidayCalendar.Builder();
		}

		public override Type beanType()
		{
		  return typeof(WeekendHolidayCalendar);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code id} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<HolidayCalendarId> id()
		{
		  return id_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code day1} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<DayOfWeek> day1()
		{
		  return day1_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code day2} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<DayOfWeek> day2()
		{
		  return day2_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  return ((WeekendHolidayCalendar) bean).Id;
			case 3076117: // day1
			  return ((WeekendHolidayCalendar) bean).Day1;
			case 3076118: // day2
			  return ((WeekendHolidayCalendar) bean).Day2;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code WeekendHolidayCalendar}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<WeekendHolidayCalendar>
	  {

		internal HolidayCalendarId id;
		internal DayOfWeek day1;
		internal DayOfWeek day2;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  return id;
			case 3076117: // day1
			  return day1;
			case 3076118: // day2
			  return day2;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3355: // id
			  this.id = (HolidayCalendarId) newValue;
			  break;
			case 3076117: // day1
			  this.day1 = (DayOfWeek) newValue;
			  break;
			case 3076118: // day2
			  this.day2 = (DayOfWeek) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override WeekendHolidayCalendar build()
		{
		  return new WeekendHolidayCalendar(id, day1, day2);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("WeekendHolidayCalendar.Builder{");
		  buf.Append("id").Append('=').Append(JodaBeanUtils.ToString(id)).Append(',').Append(' ');
		  buf.Append("day1").Append('=').Append(JodaBeanUtils.ToString(day1)).Append(',').Append(' ');
		  buf.Append("day2").Append('=').Append(JodaBeanUtils.ToString(day2));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}