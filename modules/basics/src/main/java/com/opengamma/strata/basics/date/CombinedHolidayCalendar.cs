using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.date
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// A holiday calendar implementation that combines two other calendars.
	/// <para>
	/// This immutable implementation of <seealso cref="HolidayCalendar"/> stores two underlying calendars.
	/// A date is a holiday if either calendar defines it as a holiday.
	/// </para>
	/// <para>
	/// This implementation is intended for short-lived queries.
	/// To combine two calendars for the long-term, such as in a static constant,
	/// see <seealso cref="ImmutableHolidayCalendar#combined(ImmutableHolidayCalendar, ImmutableHolidayCalendar)"/>.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private", constructorScope = "package") final class CombinedHolidayCalendar implements HolidayCalendar, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class CombinedHolidayCalendar : HolidayCalendar, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final HolidayCalendar calendar1;
		private readonly HolidayCalendar calendar1;
	  /// <summary>
	  /// The second underlying calendar.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final HolidayCalendar calendar2;
	  private readonly HolidayCalendar calendar2;

	  //-------------------------------------------------------------------------
	  public HolidayCalendarId Id
	  {
		  get
		  {
			return calendar1.Id.combinedWith(calendar2.Id);
		  }
	  }

	  public bool isHoliday(LocalDate date)
	  {
		return calendar1.isHoliday(date) || calendar2.isHoliday(date);
	  }

	  public override string ToString()
	  {
		return "HolidayCalendar[" + Name + ']';
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CombinedHolidayCalendar}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static CombinedHolidayCalendar.Meta meta()
	  {
		return CombinedHolidayCalendar.Meta.INSTANCE;
	  }

	  static CombinedHolidayCalendar()
	  {
		MetaBean.register(CombinedHolidayCalendar.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="calendar1">  the value of the property, not null </param>
	  /// <param name="calendar2">  the value of the property, not null </param>
	  internal CombinedHolidayCalendar(HolidayCalendar calendar1, HolidayCalendar calendar2)
	  {
		JodaBeanUtils.notNull(calendar1, "calendar1");
		JodaBeanUtils.notNull(calendar2, "calendar2");
		this.calendar1 = calendar1;
		this.calendar2 = calendar2;
	  }

	  public override CombinedHolidayCalendar.Meta metaBean()
	  {
		return CombinedHolidayCalendar.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the first underlying calendar. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public HolidayCalendar Calendar1
	  {
		  get
		  {
			return calendar1;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the second underlying calendar. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public HolidayCalendar Calendar2
	  {
		  get
		  {
			return calendar2;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CombinedHolidayCalendar other = (CombinedHolidayCalendar) obj;
		  return JodaBeanUtils.equal(calendar1, other.calendar1) && JodaBeanUtils.equal(calendar2, other.calendar2);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(calendar1);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(calendar2);
		return hash;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code CombinedHolidayCalendar}.
	  /// </summary>
	  internal sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  calendar1_Renamed = DirectMetaProperty.ofImmutable(this, "calendar1", typeof(CombinedHolidayCalendar), typeof(HolidayCalendar));
			  calendar2_Renamed = DirectMetaProperty.ofImmutable(this, "calendar2", typeof(CombinedHolidayCalendar), typeof(HolidayCalendar));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "calendar1", "calendar2");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code calendar1} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<HolidayCalendar> calendar1_Renamed;
		/// <summary>
		/// The meta-property for the {@code calendar2} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<HolidayCalendar> calendar2_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "calendar1", "calendar2");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1233097549: // calendar1
			  return calendar1_Renamed;
			case -1233097548: // calendar2
			  return calendar2_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends CombinedHolidayCalendar> builder()
		public override BeanBuilder<CombinedHolidayCalendar> builder()
		{
		  return new CombinedHolidayCalendar.Builder();
		}

		public override Type beanType()
		{
		  return typeof(CombinedHolidayCalendar);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code calendar1} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<HolidayCalendar> calendar1()
		{
		  return calendar1_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code calendar2} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<HolidayCalendar> calendar2()
		{
		  return calendar2_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1233097549: // calendar1
			  return ((CombinedHolidayCalendar) bean).Calendar1;
			case -1233097548: // calendar2
			  return ((CombinedHolidayCalendar) bean).Calendar2;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code CombinedHolidayCalendar}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<CombinedHolidayCalendar>
	  {

		internal HolidayCalendar calendar1;
		internal HolidayCalendar calendar2;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1233097549: // calendar1
			  return calendar1;
			case -1233097548: // calendar2
			  return calendar2;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case -1233097549: // calendar1
			  this.calendar1 = (HolidayCalendar) newValue;
			  break;
			case -1233097548: // calendar2
			  this.calendar2 = (HolidayCalendar) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override CombinedHolidayCalendar build()
		{
		  return new CombinedHolidayCalendar(calendar1, calendar2);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("CombinedHolidayCalendar.Builder{");
		  buf.Append("calendar1").Append('=').Append(JodaBeanUtils.ToString(calendar1)).Append(',').Append(' ');
		  buf.Append("calendar2").Append('=').Append(JodaBeanUtils.ToString(calendar2));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}