using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ImmutableList = com.google.common.collect.ImmutableList;

	/// <summary>
	/// A list of calculation targets.
	/// <para>
	/// <seealso cref="CalculationTarget"/> is a marker interface that all financial instruments implement,
	/// such as trades and positions. This allows them to be the target of calculations in the system.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class CalculationTargetList implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class CalculationTargetList : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<CalculationTarget> targets;
		private readonly ImmutableList<CalculationTarget> targets;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from a list of targets.
	  /// </summary>
	  /// <param name="targets">  the list of targets </param>
	  /// <returns> the list of targets </returns>
	  public static CalculationTargetList of(params CalculationTarget[] targets)
	  {
		return new CalculationTargetList(ImmutableList.copyOf(targets));
	  }

	  /// <summary>
	  /// Obtains an instance from a list of targets.
	  /// </summary>
	  /// <param name="targets">  the list of targets </param>
	  /// <returns> the list of targets </returns>
	  public static CalculationTargetList of<T1>(IList<T1> targets) where T1 : CalculationTarget
	  {
		return new CalculationTargetList(ImmutableList.copyOf(targets));
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CalculationTargetList}.
	  /// </summary>
	  private static readonly TypedMetaBean<CalculationTargetList> META_BEAN = LightMetaBean.of(typeof(CalculationTargetList), MethodHandles.lookup(), new string[] {"targets"}, ImmutableList.of());

	  /// <summary>
	  /// The meta-bean for {@code CalculationTargetList}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<CalculationTargetList> meta()
	  {
		return META_BEAN;
	  }

	  static CalculationTargetList()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private CalculationTargetList(IList<CalculationTarget> targets)
	  {
		JodaBeanUtils.notNull(targets, "targets");
		this.targets = ImmutableList.copyOf(targets);
	  }

	  public override TypedMetaBean<CalculationTargetList> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the targets. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<CalculationTarget> Targets
	  {
		  get
		  {
			return targets;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CalculationTargetList other = (CalculationTargetList) obj;
		  return JodaBeanUtils.equal(targets, other.targets);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(targets);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("CalculationTargetList{");
		buf.Append("targets").Append('=').Append(JodaBeanUtils.ToString(targets));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}