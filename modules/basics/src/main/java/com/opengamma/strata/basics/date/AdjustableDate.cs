using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics.date
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// An adjustable date.
	/// <para>
	/// This class combines an unadjusted date and the business day adjustment necessary to adjust it.
	/// Calling the <seealso cref="#adjusted(ReferenceData)"/> method will return the adjusted date.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class AdjustableDate implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class AdjustableDate : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.LocalDate unadjusted;
		private readonly LocalDate unadjusted;
	  /// <summary>
	  /// The business day adjustment that is to be applied to the unadjusted date.
	  /// <para>
	  /// This is used to adjust the date if it is not a business day.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final BusinessDayAdjustment adjustment;
	  private readonly BusinessDayAdjustment adjustment;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance with no business day adjustment.
	  /// <para>
	  /// This creates an adjustable date from the specified date.
	  /// No business day adjustment applies, thus the result of <seealso cref="#adjusted(ReferenceData)"/>
	  /// is the specified date.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="date">  the date </param>
	  /// <returns> the adjustable date </returns>
	  public static AdjustableDate of(LocalDate date)
	  {
		return new AdjustableDate(date, BusinessDayAdjustment.NONE);
	  }

	  /// <summary>
	  /// Obtains an instance with a business day adjustment.
	  /// <para>
	  /// This creates an adjustable date from the unadjusted date and business day adjustment.
	  /// The adjusted date is accessible via <seealso cref="#adjusted(ReferenceData)"/>.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="unadjusted">  the unadjusted date </param>
	  /// <param name="adjustment">  the business day adjustment to apply to the unadjusted date </param>
	  /// <returns> the adjustable date </returns>
	  public static AdjustableDate of(LocalDate unadjusted, BusinessDayAdjustment adjustment)
	  {
		return new AdjustableDate(unadjusted, adjustment);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Adjusts the date using the business day adjustment.
	  /// <para>
	  /// This returns the adjusted date, calculated by applying the business day
	  /// adjustment to the unadjusted date.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="refData">  the reference data to use </param>
	  /// <returns> the adjusted date </returns>
	  public LocalDate adjusted(ReferenceData refData)
	  {
		return adjustment.adjust(unadjusted, refData);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Returns a string describing the adjustable date.
	  /// </summary>
	  /// <returns> the descriptive string </returns>
	  public override string ToString()
	  {
		if (adjustment.Equals(BusinessDayAdjustment.NONE))
		{
		  return unadjusted.ToString();
		}
		return (new StringBuilder(64)).Append(unadjusted).Append(" adjusted by ").Append(adjustment).ToString();
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code AdjustableDate}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static AdjustableDate.Meta meta()
	  {
		return AdjustableDate.Meta.INSTANCE;
	  }

	  static AdjustableDate()
	  {
		MetaBean.register(AdjustableDate.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private AdjustableDate(LocalDate unadjusted, BusinessDayAdjustment adjustment)
	  {
		JodaBeanUtils.notNull(unadjusted, "unadjusted");
		JodaBeanUtils.notNull(adjustment, "adjustment");
		this.unadjusted = unadjusted;
		this.adjustment = adjustment;
	  }

	  public override AdjustableDate.Meta metaBean()
	  {
		return AdjustableDate.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the unadjusted date.
	  /// <para>
	  /// This date may be a non-business day.
	  /// The business day adjustment is used to ensure it is a valid business day.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LocalDate Unadjusted
	  {
		  get
		  {
			return unadjusted;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the business day adjustment that is to be applied to the unadjusted date.
	  /// <para>
	  /// This is used to adjust the date if it is not a business day.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public BusinessDayAdjustment Adjustment
	  {
		  get
		  {
			return adjustment;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  AdjustableDate other = (AdjustableDate) obj;
		  return JodaBeanUtils.equal(unadjusted, other.unadjusted) && JodaBeanUtils.equal(adjustment, other.adjustment);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(unadjusted);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(adjustment);
		return hash;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code AdjustableDate}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  unadjusted_Renamed = DirectMetaProperty.ofImmutable(this, "unadjusted", typeof(AdjustableDate), typeof(LocalDate));
			  adjustment_Renamed = DirectMetaProperty.ofImmutable(this, "adjustment", typeof(AdjustableDate), typeof(BusinessDayAdjustment));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "unadjusted", "adjustment");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code unadjusted} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<LocalDate> unadjusted_Renamed;
		/// <summary>
		/// The meta-property for the {@code adjustment} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<BusinessDayAdjustment> adjustment_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "unadjusted", "adjustment");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 482476551: // unadjusted
			  return unadjusted_Renamed;
			case 1977085293: // adjustment
			  return adjustment_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends AdjustableDate> builder()
		public override BeanBuilder<AdjustableDate> builder()
		{
		  return new AdjustableDate.Builder();
		}

		public override Type beanType()
		{
		  return typeof(AdjustableDate);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code unadjusted} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<LocalDate> unadjusted()
		{
		  return unadjusted_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code adjustment} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<BusinessDayAdjustment> adjustment()
		{
		  return adjustment_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 482476551: // unadjusted
			  return ((AdjustableDate) bean).Unadjusted;
			case 1977085293: // adjustment
			  return ((AdjustableDate) bean).Adjustment;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code AdjustableDate}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<AdjustableDate>
	  {

		internal LocalDate unadjusted;
		internal BusinessDayAdjustment adjustment;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 482476551: // unadjusted
			  return unadjusted;
			case 1977085293: // adjustment
			  return adjustment;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 482476551: // unadjusted
			  this.unadjusted = (LocalDate) newValue;
			  break;
			case 1977085293: // adjustment
			  this.adjustment = (BusinessDayAdjustment) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override AdjustableDate build()
		{
		  return new AdjustableDate(unadjusted, adjustment);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("AdjustableDate.Builder{");
		  buf.Append("unadjusted").Append('=').Append(JodaBeanUtils.ToString(unadjusted)).Append(',').Append(' ');
		  buf.Append("adjustment").Append('=').Append(JodaBeanUtils.ToString(adjustment));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}