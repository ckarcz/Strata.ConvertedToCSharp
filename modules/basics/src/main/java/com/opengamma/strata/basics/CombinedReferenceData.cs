using System;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.basics
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	/// <summary>
	/// A set of reference data which combines the data from two other <seealso cref="ReferenceData"/> instances.
	/// <para>
	/// When an item of data is requested the underlying sets of reference data are checked in order.
	/// If the item is present in the first set of data it is returned. If the item is not found
	/// it is looked up in the second set of data.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", constructorScope = "package") final class CombinedReferenceData implements ReferenceData, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class CombinedReferenceData : ReferenceData, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ReferenceData refData1;
		private readonly ReferenceData refData1;
	  /// <summary>
	  /// The second set of reference data.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ReferenceData refData2;
	  private readonly ReferenceData refData2;

	  //-------------------------------------------------------------------------
	  public override bool containsValue<T1>(ReferenceDataId<T1> id)
	  {
		return refData1.containsValue(id) || refData2.containsValue(id);
	  }

	  public T queryValueOrNull<T>(ReferenceDataId<T> id)
	  {
		T value1 = refData1.queryValueOrNull(id);
		return value1 != null ? value1 : refData2.queryValueOrNull(id);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CombinedReferenceData}.
	  /// </summary>
	  private static readonly TypedMetaBean<CombinedReferenceData> META_BEAN = LightMetaBean.of(typeof(CombinedReferenceData), MethodHandles.lookup(), new string[] {"refData1", "refData2"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code CombinedReferenceData}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<CombinedReferenceData> meta()
	  {
		return META_BEAN;
	  }

	  static CombinedReferenceData()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="refData1">  the value of the property, not null </param>
	  /// <param name="refData2">  the value of the property, not null </param>
	  internal CombinedReferenceData(ReferenceData refData1, ReferenceData refData2)
	  {
		JodaBeanUtils.notNull(refData1, "refData1");
		JodaBeanUtils.notNull(refData2, "refData2");
		this.refData1 = refData1;
		this.refData2 = refData2;
	  }

	  public override TypedMetaBean<CombinedReferenceData> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the first set of reference data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ReferenceData RefData1
	  {
		  get
		  {
			return refData1;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the second set of reference data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ReferenceData RefData2
	  {
		  get
		  {
			return refData2;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CombinedReferenceData other = (CombinedReferenceData) obj;
		  return JodaBeanUtils.equal(refData1, other.refData1) && JodaBeanUtils.equal(refData2, other.refData2);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(refData1);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(refData2);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("CombinedReferenceData{");
		buf.Append("refData1").Append('=').Append(refData1).Append(',').Append(' ');
		buf.Append("refData2").Append('=').Append(JodaBeanUtils.ToString(refData2));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}