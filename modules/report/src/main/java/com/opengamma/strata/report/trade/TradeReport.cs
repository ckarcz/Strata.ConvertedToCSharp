using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.report.trade
{
//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static com.opengamma.strata.collect.Guavate.toImmutableList;


	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using ImmutableTable = com.google.common.collect.ImmutableTable;
	using Table = com.google.common.collect.Table;
	using Result = com.opengamma.strata.collect.result.Result;

	/// <summary>
	/// Represents a trade report.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class TradeReport implements com.opengamma.strata.report.Report, org.joda.beans.ImmutableBean
	public sealed class TradeReport : Report, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final java.time.LocalDate valuationDate;
		private readonly LocalDate valuationDate;
	  /// <summary>
	  /// The instant at which the report was run.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final java.time.Instant runInstant;
	  private readonly Instant runInstant;
	  /// <summary>
	  /// The report columns, which may contain information required for formatting.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<TradeReportColumn> columns;
	  private readonly ImmutableList<TradeReportColumn> columns;
	  /// <summary>
	  /// The calculation results.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableTable<int, int, com.opengamma.strata.collect.result.Result<?>> data;
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
	  private readonly ImmutableTable<int, int, Result<object>> data;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Returns a new trade report.
	  /// </summary>
	  /// <param name="calculationResults">  the results of the calculations </param>
	  /// <param name="reportTemplate">  the template used to generate the report </param>
	  /// <returns> a new trade report </returns>
	  public static TradeReport of(ReportCalculationResults calculationResults, TradeReportTemplate reportTemplate)
	  {
		return TradeReportRunner.INSTANCE.runReport(calculationResults, reportTemplate);
	  }

	  //-------------------------------------------------------------------------
	  public int RowCount
	  {
		  get
		  {
			return data.rowKeySet().size();
		  }
	  }

	  public ImmutableList<string> ColumnHeaders
	  {
		  get
		  {
	//JAVA TO C# CONVERTER TODO TASK: Most Java stream collectors are not converted by Java to C# Converter:
			return columns.Select(c => c.Header).collect(toImmutableList());
		  }
	  }

	  //-------------------------------------------------------------------------
	  public void writeCsv(Stream @out)
	  {
		TradeReportFormatter.INSTANCE.writeCsv(this, @out);
	  }

	  public void writeAsciiTable(Stream @out)
	  {
		TradeReportFormatter.INSTANCE.writeAsciiTable(this, @out);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code TradeReport}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TradeReport.Meta meta()
	  {
		return TradeReport.Meta.INSTANCE;
	  }

	  static TradeReport()
	  {
		MetaBean.register(TradeReport.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static TradeReport.Builder builder()
	  {
		return new TradeReport.Builder();
	  }

	  private TradeReport<T1>(LocalDate valuationDate, Instant runInstant, IList<TradeReportColumn> columns, Table<T1> data)
	  {
		JodaBeanUtils.notNull(valuationDate, "valuationDate");
		JodaBeanUtils.notNull(runInstant, "runInstant");
		JodaBeanUtils.notNull(columns, "columns");
		JodaBeanUtils.notNull(data, "data");
		this.valuationDate = valuationDate;
		this.runInstant = runInstant;
		this.columns = ImmutableList.copyOf(columns);
		this.data = ImmutableTable.copyOf(data);
	  }

	  public override TradeReport.Meta metaBean()
	  {
		return TradeReport.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the valuation date. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LocalDate ValuationDate
	  {
		  get
		  {
			return valuationDate;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the instant at which the report was run. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public Instant RunInstant
	  {
		  get
		  {
			return runInstant;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the report columns, which may contain information required for formatting. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<TradeReportColumn> Columns
	  {
		  get
		  {
			return columns;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the calculation results. </summary>
	  /// <returns> the value of the property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public com.google.common.collect.ImmutableTable<int, int, com.opengamma.strata.collect.result.Result<?>> getData()
	  public ImmutableTable<int, int, Result<object>> Data
	  {
		  get
		  {
			return data;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  TradeReport other = (TradeReport) obj;
		  return JodaBeanUtils.equal(valuationDate, other.valuationDate) && JodaBeanUtils.equal(runInstant, other.runInstant) && JodaBeanUtils.equal(columns, other.columns) && JodaBeanUtils.equal(data, other.data);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(valuationDate);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(runInstant);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(columns);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(data);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(160);
		buf.Append("TradeReport{");
		buf.Append("valuationDate").Append('=').Append(valuationDate).Append(',').Append(' ');
		buf.Append("runInstant").Append('=').Append(runInstant).Append(',').Append(' ');
		buf.Append("columns").Append('=').Append(columns).Append(',').Append(' ');
		buf.Append("data").Append('=').Append(JodaBeanUtils.ToString(data));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code TradeReport}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  valuationDate_Renamed = DirectMetaProperty.ofImmutable(this, "valuationDate", typeof(TradeReport), typeof(LocalDate));
			  runInstant_Renamed = DirectMetaProperty.ofImmutable(this, "runInstant", typeof(TradeReport), typeof(Instant));
			  columns_Renamed = DirectMetaProperty.ofImmutable(this, "columns", typeof(TradeReport), (Type) typeof(ImmutableList));
			  data_Renamed = DirectMetaProperty.ofImmutable(this, "data", typeof(TradeReport), (Type) typeof(ImmutableTable));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "valuationDate", "runInstant", "columns", "data");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code valuationDate} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<LocalDate> valuationDate_Renamed;
		/// <summary>
		/// The meta-property for the {@code runInstant} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<Instant> runInstant_Renamed;
		/// <summary>
		/// The meta-property for the {@code columns} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableList<TradeReportColumn>> columns = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "columns", TradeReport.class, (Class) com.google.common.collect.ImmutableList.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ImmutableList<TradeReportColumn>> columns_Renamed;
		/// <summary>
		/// The meta-property for the {@code data} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableTable<int, int, com.opengamma.strata.collect.result.Result<?>>> data = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "data", TradeReport.class, (Class) com.google.common.collect.ImmutableTable.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		internal MetaProperty<ImmutableTable<int, int, Result<object>>> data_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "valuationDate", "runInstant", "columns", "data");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 113107279: // valuationDate
			  return valuationDate_Renamed;
			case 111354070: // runInstant
			  return runInstant_Renamed;
			case 949721053: // columns
			  return columns_Renamed;
			case 3076010: // data
			  return data_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override TradeReport.Builder builder()
		{
		  return new TradeReport.Builder();
		}

		public override Type beanType()
		{
		  return typeof(TradeReport);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code valuationDate} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<LocalDate> valuationDate()
		{
		  return valuationDate_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code runInstant} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<Instant> runInstant()
		{
		  return runInstant_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code columns} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ImmutableList<TradeReportColumn>> columns()
		{
		  return columns_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code data} property. </summary>
		/// <returns> the meta-property, not null </returns>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public org.joda.beans.MetaProperty<com.google.common.collect.ImmutableTable<int, int, com.opengamma.strata.collect.result.Result<?>>> data()
		public MetaProperty<ImmutableTable<int, int, Result<object>>> data()
		{
		  return data_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 113107279: // valuationDate
			  return ((TradeReport) bean).ValuationDate;
			case 111354070: // runInstant
			  return ((TradeReport) bean).RunInstant;
			case 949721053: // columns
			  return ((TradeReport) bean).Columns;
			case 3076010: // data
			  return ((TradeReport) bean).Data;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code TradeReport}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<TradeReport>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal LocalDate valuationDate_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal Instant runInstant_Renamed;
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal IList<TradeReportColumn> columns_Renamed = ImmutableList.of();
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private com.google.common.collect.Table<int, int, com.opengamma.strata.collect.result.Result<?>> data = com.google.common.collect.ImmutableTable.of();
		internal Table<int, int, Result<object>> data_Renamed = ImmutableTable.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(TradeReport beanToCopy)
		{
		  this.valuationDate_Renamed = beanToCopy.ValuationDate;
		  this.runInstant_Renamed = beanToCopy.RunInstant;
		  this.columns_Renamed = beanToCopy.Columns;
		  this.data_Renamed = beanToCopy.Data;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 113107279: // valuationDate
			  return valuationDate_Renamed;
			case 111354070: // runInstant
			  return runInstant_Renamed;
			case 949721053: // columns
			  return columns_Renamed;
			case 3076010: // data
			  return data_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 113107279: // valuationDate
			  this.valuationDate_Renamed = (LocalDate) newValue;
			  break;
			case 111354070: // runInstant
			  this.runInstant_Renamed = (Instant) newValue;
			  break;
			case 949721053: // columns
			  this.columns_Renamed = (IList<TradeReportColumn>) newValue;
			  break;
			case 3076010: // data
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: this.data = (com.google.common.collect.Table<int, int, com.opengamma.strata.collect.result.Result<?>>) newValue;
			  this.data_Renamed = (Table<int, int, Result<object>>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override TradeReport build()
		{
		  return new TradeReport(valuationDate_Renamed, runInstant_Renamed, columns_Renamed, data_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the valuation date. </summary>
		/// <param name="valuationDate">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder valuationDate(LocalDate valuationDate)
		{
		  JodaBeanUtils.notNull(valuationDate, "valuationDate");
		  this.valuationDate_Renamed = valuationDate;
		  return this;
		}

		/// <summary>
		/// Sets the instant at which the report was run. </summary>
		/// <param name="runInstant">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder runInstant(Instant runInstant)
		{
		  JodaBeanUtils.notNull(runInstant, "runInstant");
		  this.runInstant_Renamed = runInstant;
		  return this;
		}

		/// <summary>
		/// Sets the report columns, which may contain information required for formatting. </summary>
		/// <param name="columns">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder columns(IList<TradeReportColumn> columns)
		{
		  JodaBeanUtils.notNull(columns, "columns");
		  this.columns_Renamed = columns;
		  return this;
		}

		/// <summary>
		/// Sets the {@code columns} property in the builder
		/// from an array of objects. </summary>
		/// <param name="columns">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder columns(params TradeReportColumn[] columns)
		{
		  return this.columns(ImmutableList.copyOf(columns));
		}

		/// <summary>
		/// Sets the calculation results. </summary>
		/// <param name="data">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder data<T1>(Table<T1> data)
		{
		  JodaBeanUtils.notNull(data, "data");
		  this.data_Renamed = data;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(160);
		  buf.Append("TradeReport.Builder{");
		  buf.Append("valuationDate").Append('=').Append(JodaBeanUtils.ToString(valuationDate_Renamed)).Append(',').Append(' ');
		  buf.Append("runInstant").Append('=').Append(JodaBeanUtils.ToString(runInstant_Renamed)).Append(',').Append(' ');
		  buf.Append("columns").Append('=').Append(JodaBeanUtils.ToString(columns_Renamed)).Append(',').Append(' ');
		  buf.Append("data").Append('=').Append(JodaBeanUtils.ToString(data_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}