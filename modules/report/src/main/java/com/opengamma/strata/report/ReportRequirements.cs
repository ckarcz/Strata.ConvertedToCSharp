using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.report
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using Column = com.opengamma.strata.calc.Column;

	/// <summary>
	/// Describes the requirements for a report to be run in terms of trade-level measures that
	/// can be separately obtained by the calculation engine.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class ReportRequirements implements org.joda.beans.ImmutableBean
	public sealed class ReportRequirements : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<com.opengamma.strata.calc.Column> tradeMeasureRequirements;
		private readonly ImmutableList<Column> tradeMeasureRequirements;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from the columns.
	  /// </summary>
	  /// <param name="columns">  the columns to calculate </param>
	  /// <returns> the requirements </returns>
	  public static ReportRequirements of(params Column[] columns)
	  {
		return new ReportRequirements(ImmutableList.copyOf(columns));
	  }

	  /// <summary>
	  /// Obtains an instance from the columns.
	  /// </summary>
	  /// <param name="columns">  the columns to calculate </param>
	  /// <returns> the requirements </returns>
	  public static ReportRequirements of(IList<Column> columns)
	  {
		return new ReportRequirements(columns);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code ReportRequirements}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static ReportRequirements.Meta meta()
	  {
		return ReportRequirements.Meta.INSTANCE;
	  }

	  static ReportRequirements()
	  {
		MetaBean.register(ReportRequirements.Meta.INSTANCE);
	  }

	  private ReportRequirements(IList<Column> tradeMeasureRequirements)
	  {
		JodaBeanUtils.notNull(tradeMeasureRequirements, "tradeMeasureRequirements");
		this.tradeMeasureRequirements = ImmutableList.copyOf(tradeMeasureRequirements);
	  }

	  public override ReportRequirements.Meta metaBean()
	  {
		return ReportRequirements.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the trade-level measure requirements. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<Column> TradeMeasureRequirements
	  {
		  get
		  {
			return tradeMeasureRequirements;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  ReportRequirements other = (ReportRequirements) obj;
		  return JodaBeanUtils.equal(tradeMeasureRequirements, other.tradeMeasureRequirements);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(tradeMeasureRequirements);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("ReportRequirements{");
		buf.Append("tradeMeasureRequirements").Append('=').Append(JodaBeanUtils.ToString(tradeMeasureRequirements));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code ReportRequirements}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  tradeMeasureRequirements_Renamed = DirectMetaProperty.ofImmutable(this, "tradeMeasureRequirements", typeof(ReportRequirements), (Type) typeof(ImmutableList));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "tradeMeasureRequirements");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code tradeMeasureRequirements} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableList<com.opengamma.strata.calc.Column>> tradeMeasureRequirements = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "tradeMeasureRequirements", ReportRequirements.class, (Class) com.google.common.collect.ImmutableList.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ImmutableList<Column>> tradeMeasureRequirements_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "tradeMeasureRequirements");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 968654090: // tradeMeasureRequirements
			  return tradeMeasureRequirements_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends ReportRequirements> builder()
		public override BeanBuilder<ReportRequirements> builder()
		{
		  return new ReportRequirements.Builder();
		}

		public override Type beanType()
		{
		  return typeof(ReportRequirements);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code tradeMeasureRequirements} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ImmutableList<Column>> tradeMeasureRequirements()
		{
		  return tradeMeasureRequirements_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 968654090: // tradeMeasureRequirements
			  return ((ReportRequirements) bean).TradeMeasureRequirements;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code ReportRequirements}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<ReportRequirements>
	  {

		internal IList<Column> tradeMeasureRequirements = ImmutableList.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 968654090: // tradeMeasureRequirements
			  return tradeMeasureRequirements;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 968654090: // tradeMeasureRequirements
			  this.tradeMeasureRequirements = (IList<Column>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override ReportRequirements build()
		{
		  return new ReportRequirements(tradeMeasureRequirements);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("ReportRequirements.Builder{");
		  buf.Append("tradeMeasureRequirements").Append('=').Append(JodaBeanUtils.ToString(tradeMeasureRequirements));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}