using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.report.trade
{

	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using IniFile = com.opengamma.strata.collect.io.IniFile;

	/// <summary>
	/// Describes the contents and layout of a trade report.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class TradeReportTemplate implements com.opengamma.strata.report.ReportTemplate, org.joda.beans.ImmutableBean
	public sealed class TradeReportTemplate : ReportTemplate, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.util.List<TradeReportColumn> columns;
		private readonly IList<TradeReportColumn> columns;

	  /// <summary>
	  /// Creates a trade report template by reading a template definition in an ini file.
	  /// </summary>
	  /// <param name="ini">  the ini file containing the definition of the template </param>
	  /// <returns> a trade report template built from the definition in the ini file </returns>
	  public static TradeReportTemplate load(IniFile ini)
	  {
		TradeReportTemplateIniLoader loader = new TradeReportTemplateIniLoader();
		return loader.load(ini);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code TradeReportTemplate}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TradeReportTemplate.Meta meta()
	  {
		return TradeReportTemplate.Meta.INSTANCE;
	  }

	  static TradeReportTemplate()
	  {
		MetaBean.register(TradeReportTemplate.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static TradeReportTemplate.Builder builder()
	  {
		return new TradeReportTemplate.Builder();
	  }

	  private TradeReportTemplate(IList<TradeReportColumn> columns)
	  {
		JodaBeanUtils.notNull(columns, "columns");
		this.columns = ImmutableList.copyOf(columns);
	  }

	  public override TradeReportTemplate.Meta metaBean()
	  {
		return TradeReportTemplate.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the columns in the report. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public IList<TradeReportColumn> Columns
	  {
		  get
		  {
			return columns;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  TradeReportTemplate other = (TradeReportTemplate) obj;
		  return JodaBeanUtils.equal(columns, other.columns);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(columns);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("TradeReportTemplate{");
		buf.Append("columns").Append('=').Append(JodaBeanUtils.ToString(columns));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code TradeReportTemplate}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  columns_Renamed = DirectMetaProperty.ofImmutable(this, "columns", typeof(TradeReportTemplate), (Type) typeof(System.Collections.IList));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "columns");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code columns} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<java.util.List<TradeReportColumn>> columns = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "columns", TradeReportTemplate.class, (Class) java.util.List.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<IList<TradeReportColumn>> columns_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "columns");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 949721053: // columns
			  return columns_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override TradeReportTemplate.Builder builder()
		{
		  return new TradeReportTemplate.Builder();
		}

		public override Type beanType()
		{
		  return typeof(TradeReportTemplate);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code columns} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<IList<TradeReportColumn>> columns()
		{
		  return columns_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 949721053: // columns
			  return ((TradeReportTemplate) bean).Columns;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code TradeReportTemplate}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<TradeReportTemplate>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal IList<TradeReportColumn> columns_Renamed = ImmutableList.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(TradeReportTemplate beanToCopy)
		{
		  this.columns_Renamed = ImmutableList.copyOf(beanToCopy.Columns);
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 949721053: // columns
			  return columns_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 949721053: // columns
			  this.columns_Renamed = (IList<TradeReportColumn>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override TradeReportTemplate build()
		{
		  return new TradeReportTemplate(columns_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the columns in the report. </summary>
		/// <param name="columns">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder columns(IList<TradeReportColumn> columns)
		{
		  JodaBeanUtils.notNull(columns, "columns");
		  this.columns_Renamed = columns;
		  return this;
		}

		/// <summary>
		/// Sets the {@code columns} property in the builder
		/// from an array of objects. </summary>
		/// <param name="columns">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder columns(params TradeReportColumn[] columns)
		{
		  return this.columns(ImmutableList.copyOf(columns));
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("TradeReportTemplate.Builder{");
		  buf.Append("columns").Append('=').Append(JodaBeanUtils.ToString(columns_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}