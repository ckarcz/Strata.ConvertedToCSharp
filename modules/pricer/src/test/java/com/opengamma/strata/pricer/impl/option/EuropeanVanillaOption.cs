using System;
using System.Text;

/*
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.pricer.impl.option
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ArgChecker = com.opengamma.strata.collect.ArgChecker;
	using PutCall = com.opengamma.strata.product.common.PutCall;

	/// <summary>
	/// Simple representation of a European-style vanilla option.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class EuropeanVanillaOption implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class EuropeanVanillaOption : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double strike;
		private readonly double strike;
	  /// <summary>
	  /// The time to expiry, year fraction.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "ArgChecker.notNegative") private final double timeToExpiry;
	  private readonly double timeToExpiry;
	  /// <summary>
	  /// Whether the option is call or put.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.product.common.PutCall putCall;
	  private readonly PutCall putCall;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance.
	  /// </summary>
	  /// <param name="strike">  the strike </param>
	  /// <param name="timeToExpiry">  the time to expiry, year fraction </param>
	  /// <param name="putCall">  whether the option is put or call. </param>
	  /// <returns> the option definition </returns>
	  public static EuropeanVanillaOption of(double strike, double timeToExpiry, PutCall putCall)
	  {
		return new EuropeanVanillaOption(strike, timeToExpiry, putCall);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Checks if the option is call.
	  /// </summary>
	  /// <returns> true if call, false if put </returns>
	  public bool Call
	  {
		  get
		  {
			return putCall == PutCall.CALL;
		  }
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code EuropeanVanillaOption}.
	  /// </summary>
	  private static readonly TypedMetaBean<EuropeanVanillaOption> META_BEAN = LightMetaBean.of(typeof(EuropeanVanillaOption), MethodHandles.lookup(), new string[] {"strike", "timeToExpiry", "putCall"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code EuropeanVanillaOption}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<EuropeanVanillaOption> meta()
	  {
		return META_BEAN;
	  }

	  static EuropeanVanillaOption()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private EuropeanVanillaOption(double strike, double timeToExpiry, PutCall putCall)
	  {
		ArgChecker.notNegative(timeToExpiry, "timeToExpiry");
		JodaBeanUtils.notNull(putCall, "putCall");
		this.strike = strike;
		this.timeToExpiry = timeToExpiry;
		this.putCall = putCall;
	  }

	  public override TypedMetaBean<EuropeanVanillaOption> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the strike. </summary>
	  /// <returns> the value of the property </returns>
	  public double Strike
	  {
		  get
		  {
			return strike;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the time to expiry, year fraction. </summary>
	  /// <returns> the value of the property </returns>
	  public double TimeToExpiry
	  {
		  get
		  {
			return timeToExpiry;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets whether the option is call or put. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public PutCall PutCall
	  {
		  get
		  {
			return putCall;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  EuropeanVanillaOption other = (EuropeanVanillaOption) obj;
		  return JodaBeanUtils.equal(strike, other.strike) && JodaBeanUtils.equal(timeToExpiry, other.timeToExpiry) && JodaBeanUtils.equal(putCall, other.putCall);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(strike);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(timeToExpiry);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(putCall);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("EuropeanVanillaOption{");
		buf.Append("strike").Append('=').Append(strike).Append(',').Append(' ');
		buf.Append("timeToExpiry").Append('=').Append(timeToExpiry).Append(',').Append(' ');
		buf.Append("putCall").Append('=').Append(JodaBeanUtils.ToString(putCall));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}