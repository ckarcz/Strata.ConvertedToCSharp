using System;
using System.Text;

/*
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.pricer.impl.option
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	/// <summary>
	/// A data bundle with the data require for the normal option model (Bachelier model).
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class NormalFunctionData implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class NormalFunctionData : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double forward;
		private readonly double forward;
	  /// <summary>
	  /// The numeraire associated with the equation.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double numeraire;
	  private readonly double numeraire;
	  /// <summary>
	  /// The normal volatility (sigma).
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double normalVolatility;
	  private readonly double normalVolatility;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Data bundle for pricing in a normal framework.
	  /// That is, the forward value of the underlying asset is a martingale in the chosen numeraire measure.
	  /// </summary>
	  /// <param name="forward">  the forward value of the underlying asset, such as forward value of a stock, or forward Libor rate </param>
	  /// <param name="numeraire">  the numeraire associated with the equation </param>
	  /// <param name="normalVolatility">  the normal volatility (sigma) </param>
	  /// <returns> the function data </returns>
	  public static NormalFunctionData of(double forward, double numeraire, double normalVolatility)
	  {
		return new NormalFunctionData(forward, numeraire, normalVolatility);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code NormalFunctionData}.
	  /// </summary>
	  private static readonly TypedMetaBean<NormalFunctionData> META_BEAN = LightMetaBean.of(typeof(NormalFunctionData), MethodHandles.lookup(), new string[] {"forward", "numeraire", "normalVolatility"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code NormalFunctionData}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<NormalFunctionData> meta()
	  {
		return META_BEAN;
	  }

	  static NormalFunctionData()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private NormalFunctionData(double forward, double numeraire, double normalVolatility)
	  {
		this.forward = forward;
		this.numeraire = numeraire;
		this.normalVolatility = normalVolatility;
	  }

	  public override TypedMetaBean<NormalFunctionData> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the forward value of the underlying asset
	  /// For example, the forward value of a stock, or the forward Libor rate. </summary>
	  /// <returns> the value of the property </returns>
	  public double Forward
	  {
		  get
		  {
			return forward;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the numeraire associated with the equation. </summary>
	  /// <returns> the value of the property </returns>
	  public double Numeraire
	  {
		  get
		  {
			return numeraire;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the normal volatility (sigma). </summary>
	  /// <returns> the value of the property </returns>
	  public double NormalVolatility
	  {
		  get
		  {
			return normalVolatility;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  NormalFunctionData other = (NormalFunctionData) obj;
		  return JodaBeanUtils.equal(forward, other.forward) && JodaBeanUtils.equal(numeraire, other.numeraire) && JodaBeanUtils.equal(normalVolatility, other.normalVolatility);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(forward);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(numeraire);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(normalVolatility);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("NormalFunctionData{");
		buf.Append("forward").Append('=').Append(forward).Append(',').Append(' ');
		buf.Append("numeraire").Append('=').Append(numeraire).Append(',').Append(' ');
		buf.Append("normalVolatility").Append('=').Append(JodaBeanUtils.ToString(normalVolatility));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}