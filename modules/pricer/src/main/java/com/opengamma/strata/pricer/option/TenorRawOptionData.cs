using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.pricer.option
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ImmutableSet = com.google.common.collect.ImmutableSet;
	using ImmutableSortedMap = com.google.common.collect.ImmutableSortedMap;
	using Tenor = com.opengamma.strata.basics.date.Tenor;

	/// <summary>
	/// Raw data from the volatility market for a set of tenors.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class TenorRawOptionData implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class TenorRawOptionData : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableSortedMap<com.opengamma.strata.basics.date.Tenor, RawOptionData> data;
		private readonly ImmutableSortedMap<Tenor, RawOptionData> data;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance of the raw volatility.
	  /// <para>
	  /// The data values can be model parameters (like Black or normal volatilities) or direct option prices.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="data">  the map of data by tenor </param>
	  /// <returns> the instance </returns>
	  public static TenorRawOptionData of(IDictionary<Tenor, RawOptionData> data)
	  {
		return new TenorRawOptionData(ImmutableSortedMap.copyOf(data));
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Gets the set of tenors.
	  /// </summary>
	  /// <returns> the set of tenors </returns>
	  public ImmutableSet<Tenor> Tenors
	  {
		  get
		  {
			return data.Keys;
		  }
	  }

	  /// <summary>
	  /// Gets the raw option data for a given tenor.
	  /// </summary>
	  /// <param name="tenor">  the tenor to retrieve </param>
	  /// <returns> the raw option data </returns>
	  public RawOptionData getData(Tenor tenor)
	  {
		RawOptionData result = data.get(tenor);
		if (result == null)
		{
		  throw new System.ArgumentException("No data found for tenor " + tenor);
		}
		return result;
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code TenorRawOptionData}.
	  /// </summary>
	  private static readonly TypedMetaBean<TenorRawOptionData> META_BEAN = LightMetaBean.of(typeof(TenorRawOptionData), MethodHandles.lookup(), new string[] {"data"}, ImmutableSortedMap.of());

	  /// <summary>
	  /// The meta-bean for {@code TenorRawOptionData}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<TenorRawOptionData> meta()
	  {
		return META_BEAN;
	  }

	  static TenorRawOptionData()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private TenorRawOptionData(SortedDictionary<Tenor, RawOptionData> data)
	  {
		JodaBeanUtils.notNull(data, "data");
		this.data = ImmutableSortedMap.copyOfSorted(data);
	  }

	  public override TypedMetaBean<TenorRawOptionData> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the map of tenor to option data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableSortedMap<Tenor, RawOptionData> Data
	  {
		  get
		  {
			return data;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  TenorRawOptionData other = (TenorRawOptionData) obj;
		  return JodaBeanUtils.equal(data, other.data);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(data);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("TenorRawOptionData{");
		buf.Append("data").Append('=').Append(JodaBeanUtils.ToString(data));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}