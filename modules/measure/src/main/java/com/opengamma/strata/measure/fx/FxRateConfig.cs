using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.measure.fx
{

	using Bean = org.joda.beans.Bean;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using ImmutableValidator = org.joda.beans.gen.ImmutableValidator;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectFieldsBeanBuilder = org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;

	using ImmutableMap = com.google.common.collect.ImmutableMap;
	using CurrencyPair = com.opengamma.strata.basics.currency.CurrencyPair;
	using FxRate = com.opengamma.strata.basics.currency.FxRate;
	using Messages = com.opengamma.strata.collect.Messages;
	using QuoteId = com.opengamma.strata.market.observable.QuoteId;

	/// <summary>
	/// Configuration defining how to create <seealso cref="FxRate"/> instances from observable market data.
	/// <para>
	/// Currently this only supports rates which are observable in the market. Cross rates derived from other
	/// rates will be supported later.
	/// </para>
	/// <para>
	/// This class is likely to change when support for cross rates is added.
	/// </para>
	/// <para>
	/// When populating this class all currency pairs must be quoted using the market conventions.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition public final class FxRateConfig implements org.joda.beans.ImmutableBean
	public sealed class FxRateConfig : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", get = "private") private final com.google.common.collect.ImmutableMap<com.opengamma.strata.basics.currency.CurrencyPair, com.opengamma.strata.market.observable.QuoteId> observableRates;
		private readonly ImmutableMap<CurrencyPair, QuoteId> observableRates;

	  /// <summary>
	  /// Returns a key identifying the market quote for an observable FX rate.
	  /// <para>
	  /// If the FX rate is not observable in the market an empty optional is returned.
	  /// </para>
	  /// <para>
	  /// It is possible the quote is for the rate of the inverse of the currency pair. This does not matter as
	  /// the market data system ensures that the correct rate is always provided regardless of which way round
	  /// the pair is quoted.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="currencyPair">  the currency pair </param>
	  /// <returns> a key identifying the market quote for the rate if it is observable in the market </returns>
	  public Optional<QuoteId> getObservableRateKey(CurrencyPair currencyPair)
	  {
		QuoteId quoteId = observableRates.get(currencyPair.toConventional());
		return Optional.ofNullable(quoteId);
	  }

	  /// <summary>
	  /// Returns FX rate configuration built using the data in the map.
	  /// </summary>
	  /// <param name="quotesMap">  map of currency pairs to the market quotes defining their rates </param>
	  /// <returns> FX rate configuration built using the data in the map </returns>
	  public static FxRateConfig of(IDictionary<CurrencyPair, QuoteId> quotesMap)
	  {
		return new FxRateConfig(quotesMap);
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @ImmutableValidator private void validate()
	  private void validate()
	  {
		foreach (CurrencyPair currencyPair in observableRates.Keys)
		{
		  if (!currencyPair.Conventional)
		  {
			throw new System.ArgumentException(Messages.format("Currency pairs must be quoted using market conventions but {} is not", currencyPair));
		  }
		}
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code FxRateConfig}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static FxRateConfig.Meta meta()
	  {
		return FxRateConfig.Meta.INSTANCE;
	  }

	  static FxRateConfig()
	  {
		MetaBean.register(FxRateConfig.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// Returns a builder used to create an instance of the bean. </summary>
	  /// <returns> the builder, not null </returns>
	  public static FxRateConfig.Builder builder()
	  {
		return new FxRateConfig.Builder();
	  }

	  private FxRateConfig(IDictionary<CurrencyPair, QuoteId> observableRates)
	  {
		JodaBeanUtils.notNull(observableRates, "observableRates");
		this.observableRates = ImmutableMap.copyOf(observableRates);
		validate();
	  }

	  public override FxRateConfig.Meta metaBean()
	  {
		return FxRateConfig.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the keys identifying FX rates which are observable in the market.
	  /// Each entry is keyed by the conventional currency pair. </summary>
	  /// <returns> the value of the property, not null </returns>
	  private ImmutableMap<CurrencyPair, QuoteId> ObservableRates
	  {
		  get
		  {
			return observableRates;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Returns a builder that allows this bean to be mutated. </summary>
	  /// <returns> the mutable builder, not null </returns>
	  public Builder toBuilder()
	  {
		return new Builder(this);
	  }

	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  FxRateConfig other = (FxRateConfig) obj;
		  return JodaBeanUtils.equal(observableRates, other.observableRates);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(observableRates);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("FxRateConfig{");
		buf.Append("observableRates").Append('=').Append(JodaBeanUtils.ToString(observableRates));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code FxRateConfig}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  observableRates_Renamed = DirectMetaProperty.ofImmutable(this, "observableRates", typeof(FxRateConfig), (Type) typeof(ImmutableMap));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "observableRates");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code observableRates} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableMap<com.opengamma.strata.basics.currency.CurrencyPair, com.opengamma.strata.market.observable.QuoteId>> observableRates = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "observableRates", FxRateConfig.class, (Class) com.google.common.collect.ImmutableMap.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ImmutableMap<CurrencyPair, QuoteId>> observableRates_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "observableRates");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1996176400: // observableRates
			  return observableRates_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

		public override FxRateConfig.Builder builder()
		{
		  return new FxRateConfig.Builder();
		}

		public override Type beanType()
		{
		  return typeof(FxRateConfig);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code observableRates} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ImmutableMap<CurrencyPair, QuoteId>> observableRates()
		{
		  return observableRates_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1996176400: // observableRates
			  return ((FxRateConfig) bean).ObservableRates;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code FxRateConfig}.
	  /// </summary>
	  public sealed class Builder : DirectFieldsBeanBuilder<FxRateConfig>
	  {

//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal IDictionary<CurrencyPair, QuoteId> observableRates_Renamed = ImmutableMap.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		/// <summary>
		/// Restricted copy constructor. </summary>
		/// <param name="beanToCopy">  the bean to copy from, not null </param>
		internal Builder(FxRateConfig beanToCopy)
		{
		  this.observableRates_Renamed = beanToCopy.ObservableRates;
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1996176400: // observableRates
			  return observableRates_Renamed;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1996176400: // observableRates
			  this.observableRates_Renamed = (IDictionary<CurrencyPair, QuoteId>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override Builder set<T1>(MetaProperty<T1> property, object value)
		{
		  base.set(property, value);
		  return this;
		}

		public override FxRateConfig build()
		{
		  return new FxRateConfig(observableRates_Renamed);
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// Sets the keys identifying FX rates which are observable in the market.
		/// Each entry is keyed by the conventional currency pair. </summary>
		/// <param name="observableRates">  the new value, not null </param>
		/// <returns> this, for chaining, not null </returns>
		public Builder observableRates(IDictionary<CurrencyPair, QuoteId> observableRates)
		{
		  JodaBeanUtils.notNull(observableRates, "observableRates");
		  this.observableRates_Renamed = observableRates;
		  return this;
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("FxRateConfig.Builder{");
		  buf.Append("observableRates").Append('=').Append(JodaBeanUtils.ToString(observableRates_Renamed));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}