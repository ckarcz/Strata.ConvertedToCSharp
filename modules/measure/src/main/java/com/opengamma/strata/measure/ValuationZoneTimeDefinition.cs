using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.measure
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using MarketDataBox = com.opengamma.strata.data.scenario.MarketDataBox;

	/// <summary>
	/// Definition of valuation zone and time. 
	/// <para>
	/// This contains {@code ZoneId} and a set of {@code LocalTime} to create {@code ZonedDateTime} from {@code LocalDate}.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class ValuationZoneTimeDefinition implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class ValuationZoneTimeDefinition : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.LocalTime defaultLocalTime;
		private readonly LocalTime defaultLocalTime;
	  /// <summary>
	  /// The zone ID.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.ZoneId zoneId;
	  private readonly ZoneId zoneId;
	  /// <summary>
	  /// The local time.
	  /// <para>
	  /// The local time in {@code zoneId}. 
	  /// The size is not necessarily the same as the scenario size. 
	  /// {@code defaultLocalTime} will be used if extra {@code LocalTime} is required.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<java.time.LocalTime> localTimes;
	  private readonly ImmutableList<LocalTime> localTimes;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance.
	  /// </summary>
	  /// <param name="defaultLocalTime"> default local time </param>
	  /// <param name="zoneId">  the zone ID </param>
	  /// <param name="localTimes">  the local time </param>
	  /// <returns> the instance </returns>
	  public static ValuationZoneTimeDefinition of(LocalTime defaultLocalTime, ZoneId zoneId, params LocalTime[] localTimes)
	  {
		return new ValuationZoneTimeDefinition(defaultLocalTime, zoneId, ImmutableList.copyOf(localTimes));
	  }

	  /// <summary>
	  /// Creates zoned date time. 
	  /// <para>
	  /// If the scenario size of {@code dates} is greater than the size of {@code localTimes}, 
	  /// {@code defaultLocalTime} is used.
	  /// If {@code dates} is single value, {@code defaultLocalTime} is used.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="dates">  the local date </param>
	  /// <returns> the zoned date time </returns>
	  public MarketDataBox<ZonedDateTime> toZonedDateTime(MarketDataBox<LocalDate> dates)
	  {
		if (dates.ScenarioValue)
		{
		  int nScenarios = dates.ScenarioCount;
		  int nTimes = localTimes.size();
		  IList<ZonedDateTime> zonedDateTimes = IntStream.range(0, nScenarios).mapToObj(scenarioIndex => zonedDateTime(dates.getValue(scenarioIndex), nTimes, scenarioIndex)).collect(Collectors.toList());
		  return MarketDataBox.ofScenarioValues(zonedDateTimes);
		}
		ZonedDateTime zonedDateTime = dates.SingleValue.atTime(defaultLocalTime).atZone(zoneId);
		return MarketDataBox.ofSingleValue(zonedDateTime);
	  }

	  private ZonedDateTime zonedDateTime(LocalDate date, int nTimes, int scenarioIndex)
	  {
		return date.atTime(scenarioIndex < nTimes ? localTimes.get(scenarioIndex) : defaultLocalTime).atZone(zoneId);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code ValuationZoneTimeDefinition}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static ValuationZoneTimeDefinition.Meta meta()
	  {
		return ValuationZoneTimeDefinition.Meta.INSTANCE;
	  }

	  static ValuationZoneTimeDefinition()
	  {
		MetaBean.register(ValuationZoneTimeDefinition.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private ValuationZoneTimeDefinition(LocalTime defaultLocalTime, ZoneId zoneId, IList<LocalTime> localTimes)
	  {
		JodaBeanUtils.notNull(defaultLocalTime, "defaultLocalTime");
		JodaBeanUtils.notNull(zoneId, "zoneId");
		JodaBeanUtils.notNull(localTimes, "localTimes");
		this.defaultLocalTime = defaultLocalTime;
		this.zoneId = zoneId;
		this.localTimes = ImmutableList.copyOf(localTimes);
	  }

	  public override ValuationZoneTimeDefinition.Meta metaBean()
	  {
		return ValuationZoneTimeDefinition.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the default local time.
	  /// <para>
	  /// The default local time will be used if the input date is not scenario value or
	  /// if the scenario size of the input date exceeds the size of {@code localTimes}.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LocalTime DefaultLocalTime
	  {
		  get
		  {
			return defaultLocalTime;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the zone ID. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ZoneId ZoneId
	  {
		  get
		  {
			return zoneId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the local time.
	  /// <para>
	  /// The local time in {@code zoneId}.
	  /// The size is not necessarily the same as the scenario size.
	  /// {@code defaultLocalTime} will be used if extra {@code LocalTime} is required.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<LocalTime> LocalTimes
	  {
		  get
		  {
			return localTimes;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  ValuationZoneTimeDefinition other = (ValuationZoneTimeDefinition) obj;
		  return JodaBeanUtils.equal(defaultLocalTime, other.defaultLocalTime) && JodaBeanUtils.equal(zoneId, other.zoneId) && JodaBeanUtils.equal(localTimes, other.localTimes);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(defaultLocalTime);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(zoneId);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(localTimes);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("ValuationZoneTimeDefinition{");
		buf.Append("defaultLocalTime").Append('=').Append(defaultLocalTime).Append(',').Append(' ');
		buf.Append("zoneId").Append('=').Append(zoneId).Append(',').Append(' ');
		buf.Append("localTimes").Append('=').Append(JodaBeanUtils.ToString(localTimes));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code ValuationZoneTimeDefinition}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  defaultLocalTime_Renamed = DirectMetaProperty.ofImmutable(this, "defaultLocalTime", typeof(ValuationZoneTimeDefinition), typeof(LocalTime));
			  zoneId_Renamed = DirectMetaProperty.ofImmutable(this, "zoneId", typeof(ValuationZoneTimeDefinition), typeof(ZoneId));
			  localTimes_Renamed = DirectMetaProperty.ofImmutable(this, "localTimes", typeof(ValuationZoneTimeDefinition), (Type) typeof(ImmutableList));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "defaultLocalTime", "zoneId", "localTimes");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code defaultLocalTime} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<LocalTime> defaultLocalTime_Renamed;
		/// <summary>
		/// The meta-property for the {@code zoneId} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ZoneId> zoneId_Renamed;
		/// <summary>
		/// The meta-property for the {@code localTimes} property.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings({"unchecked", "rawtypes" }) private final org.joda.beans.MetaProperty<com.google.common.collect.ImmutableList<java.time.LocalTime>> localTimes = org.joda.beans.impl.direct.DirectMetaProperty.ofImmutable(this, "localTimes", ValuationZoneTimeDefinition.class, (Class) com.google.common.collect.ImmutableList.class);
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<ImmutableList<LocalTime>> localTimes_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "defaultLocalTime", "zoneId", "localTimes");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 605993879: // defaultLocalTime
			  return defaultLocalTime_Renamed;
			case -696323609: // zoneId
			  return zoneId_Renamed;
			case 1293230747: // localTimes
			  return localTimes_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends ValuationZoneTimeDefinition> builder()
		public override BeanBuilder<ValuationZoneTimeDefinition> builder()
		{
		  return new ValuationZoneTimeDefinition.Builder();
		}

		public override Type beanType()
		{
		  return typeof(ValuationZoneTimeDefinition);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code defaultLocalTime} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<LocalTime> defaultLocalTime()
		{
		  return defaultLocalTime_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code zoneId} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ZoneId> zoneId()
		{
		  return zoneId_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code localTimes} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<ImmutableList<LocalTime>> localTimes()
		{
		  return localTimes_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 605993879: // defaultLocalTime
			  return ((ValuationZoneTimeDefinition) bean).DefaultLocalTime;
			case -696323609: // zoneId
			  return ((ValuationZoneTimeDefinition) bean).ZoneId;
			case 1293230747: // localTimes
			  return ((ValuationZoneTimeDefinition) bean).LocalTimes;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code ValuationZoneTimeDefinition}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<ValuationZoneTimeDefinition>
	  {

		internal LocalTime defaultLocalTime;
		internal ZoneId zoneId;
		internal IList<LocalTime> localTimes = ImmutableList.of();

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 605993879: // defaultLocalTime
			  return defaultLocalTime;
			case -696323609: // zoneId
			  return zoneId;
			case 1293230747: // localTimes
			  return localTimes;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") @Override public Builder set(String propertyName, Object newValue)
		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 605993879: // defaultLocalTime
			  this.defaultLocalTime = (LocalTime) newValue;
			  break;
			case -696323609: // zoneId
			  this.zoneId = (ZoneId) newValue;
			  break;
			case 1293230747: // localTimes
			  this.localTimes = (IList<LocalTime>) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override ValuationZoneTimeDefinition build()
		{
		  return new ValuationZoneTimeDefinition(defaultLocalTime, zoneId, localTimes);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(128);
		  buf.Append("ValuationZoneTimeDefinition.Builder{");
		  buf.Append("defaultLocalTime").Append('=').Append(JodaBeanUtils.ToString(defaultLocalTime)).Append(',').Append(' ');
		  buf.Append("zoneId").Append('=').Append(JodaBeanUtils.ToString(zoneId)).Append(',').Append(' ');
		  buf.Append("localTimes").Append('=').Append(JodaBeanUtils.ToString(localTimes));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}