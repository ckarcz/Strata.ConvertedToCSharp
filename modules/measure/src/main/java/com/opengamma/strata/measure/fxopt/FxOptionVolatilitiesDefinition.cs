using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.measure.fxopt
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using ReferenceData = com.opengamma.strata.basics.ReferenceData;
	using DoubleArray = com.opengamma.strata.collect.array.DoubleArray;
	using QuoteId = com.opengamma.strata.market.observable.QuoteId;
	using FxOptionVolatilities = com.opengamma.strata.pricer.fxopt.FxOptionVolatilities;

	/// <summary>
	/// The definition of how to build FX option volatilities.
	/// <para>
	/// This stores an instance of specification {@code FxOptionVolatilitiesSpecification}
	/// which allows different kinds of volatility to be created.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class FxOptionVolatilitiesDefinition implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class FxOptionVolatilitiesDefinition : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final FxOptionVolatilitiesSpecification specification;
		private readonly FxOptionVolatilitiesSpecification specification;

	  /// <summary>
	  /// Obtains an instance.
	  /// </summary>
	  /// <param name="specification">  the specification </param>
	  /// <returns> the instance </returns>
	  public static FxOptionVolatilitiesDefinition of(FxOptionVolatilitiesSpecification specification)
	  {
		return new FxOptionVolatilitiesDefinition(specification);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Creates FX option volatilities.
	  /// <para>
	  /// The number and ordering of {@code parameters} must be coherent to those of nodes, {@code #getNodes()}.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="valuationDateTime">  the valuation date time </param>
	  /// <param name="parameters">  the parameters </param>
	  /// <param name="refData">  the reference data </param>
	  /// <returns> the volatilities </returns>
	  public FxOptionVolatilities volatilities(ZonedDateTime valuationDateTime, DoubleArray parameters, ReferenceData refData)
	  {

		return specification.volatilities(valuationDateTime, parameters, refData);
	  }

	  /// <summary>
	  /// Obtains the inputs required to create the FX option volatilities.
	  /// </summary>
	  /// <returns> the inputs </returns>
	  public ImmutableList<QuoteId> volatilitiesInputs()
	  {
		return specification.volatilitiesInputs();
	  }

	  /// <summary>
	  /// Gets the number of parameters.
	  /// </summary>
	  /// <returns> the number of parameters </returns>
	  public int ParameterCount
	  {
		  get
		  {
			return specification.ParameterCount;
		  }
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code FxOptionVolatilitiesDefinition}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static FxOptionVolatilitiesDefinition.Meta meta()
	  {
		return FxOptionVolatilitiesDefinition.Meta.INSTANCE;
	  }

	  static FxOptionVolatilitiesDefinition()
	  {
		MetaBean.register(FxOptionVolatilitiesDefinition.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private FxOptionVolatilitiesDefinition(FxOptionVolatilitiesSpecification specification)
	  {
		JodaBeanUtils.notNull(specification, "specification");
		this.specification = specification;
	  }

	  public override FxOptionVolatilitiesDefinition.Meta metaBean()
	  {
		return FxOptionVolatilitiesDefinition.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the FX option volatility specification. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public FxOptionVolatilitiesSpecification Specification
	  {
		  get
		  {
			return specification;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  FxOptionVolatilitiesDefinition other = (FxOptionVolatilitiesDefinition) obj;
		  return JodaBeanUtils.equal(specification, other.specification);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(specification);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("FxOptionVolatilitiesDefinition{");
		buf.Append("specification").Append('=').Append(JodaBeanUtils.ToString(specification));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code FxOptionVolatilitiesDefinition}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  specification_Renamed = DirectMetaProperty.ofImmutable(this, "specification", typeof(FxOptionVolatilitiesDefinition), typeof(FxOptionVolatilitiesSpecification));
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "specification");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code specification} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<FxOptionVolatilitiesSpecification> specification_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "specification");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1307197699: // specification
			  return specification_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends FxOptionVolatilitiesDefinition> builder()
		public override BeanBuilder<FxOptionVolatilitiesDefinition> builder()
		{
		  return new FxOptionVolatilitiesDefinition.Builder();
		}

		public override Type beanType()
		{
		  return typeof(FxOptionVolatilitiesDefinition);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code specification} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<FxOptionVolatilitiesSpecification> specification()
		{
		  return specification_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1307197699: // specification
			  return ((FxOptionVolatilitiesDefinition) bean).Specification;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code FxOptionVolatilitiesDefinition}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<FxOptionVolatilitiesDefinition>
	  {

		internal FxOptionVolatilitiesSpecification specification;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1307197699: // specification
			  return specification;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 1307197699: // specification
			  this.specification = (FxOptionVolatilitiesSpecification) newValue;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override FxOptionVolatilitiesDefinition build()
		{
		  return new FxOptionVolatilitiesDefinition(specification);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(64);
		  buf.Append("FxOptionVolatilitiesDefinition.Builder{");
		  buf.Append("specification").Append('=').Append(JodaBeanUtils.ToString(specification));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}