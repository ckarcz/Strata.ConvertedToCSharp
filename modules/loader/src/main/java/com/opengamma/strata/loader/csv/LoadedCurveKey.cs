using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.loader.csv
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using CurveName = com.opengamma.strata.market.curve.CurveName;

	/// <summary>
	/// Identifies an instance of a named curve on a specific date.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") final class LoadedCurveKey implements org.joda.beans.ImmutableBean
	internal sealed class LoadedCurveKey : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.LocalDate curveDate;
		private readonly LocalDate curveDate;
	  /// <summary>
	  /// The curve name.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.market.curve.CurveName curveName;
	  private readonly CurveName curveName;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from typed strings where applicable.
	  /// </summary>
	  /// <param name="curveDate">  the curve date </param>
	  /// <param name="curveName">  the curve name </param>
	  /// <returns> the curve key </returns>
	  internal static LoadedCurveKey of(LocalDate curveDate, CurveName curveName)
	  {
		return new LoadedCurveKey(curveDate, curveName);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code LoadedCurveKey}.
	  /// </summary>
	  private static readonly TypedMetaBean<LoadedCurveKey> META_BEAN = LightMetaBean.of(typeof(LoadedCurveKey), MethodHandles.lookup(), new string[] {"curveDate", "curveName"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code LoadedCurveKey}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<LoadedCurveKey> meta()
	  {
		return META_BEAN;
	  }

	  static LoadedCurveKey()
	  {
		MetaBean.register(META_BEAN);
	  }

	  private LoadedCurveKey(LocalDate curveDate, CurveName curveName)
	  {
		JodaBeanUtils.notNull(curveDate, "curveDate");
		JodaBeanUtils.notNull(curveName, "curveName");
		this.curveDate = curveDate;
		this.curveName = curveName;
	  }

	  public override TypedMetaBean<LoadedCurveKey> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the curve date. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LocalDate CurveDate
	  {
		  get
		  {
			return curveDate;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the curve name. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CurveName CurveName
	  {
		  get
		  {
			return curveName;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  LoadedCurveKey other = (LoadedCurveKey) obj;
		  return JodaBeanUtils.equal(curveDate, other.curveDate) && JodaBeanUtils.equal(curveName, other.curveName);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(curveDate);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(curveName);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("LoadedCurveKey{");
		buf.Append("curveDate").Append('=').Append(curveDate).Append(',').Append(' ');
		buf.Append("curveName").Append('=').Append(JodaBeanUtils.ToString(curveName));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}