using System;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.loader.csv
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ComparisonChain = com.google.common.collect.ComparisonChain;

	/// <summary>
	/// Represents a node on a calibrated curve.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") final class LoadedCurveNode implements Comparable<LoadedCurveNode>, org.joda.beans.ImmutableBean
	internal sealed class LoadedCurveNode : IComparable<LoadedCurveNode>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final java.time.LocalDate date;
		private readonly LocalDate date;
	  /// <summary>
	  /// The value of the curve at the node.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final double value;
	  private readonly double value;
	  /// <summary>
	  /// The label to use for the node.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final String label;
	  private readonly string label;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance.
	  /// </summary>
	  /// <param name="date">  the date of the node </param>
	  /// <param name="value">  the value of the node </param>
	  /// <param name="label">  the label of the node </param>
	  /// <returns> the curve node </returns>
	  internal static LoadedCurveNode of(LocalDate date, double value, string label)
	  {
		return new LoadedCurveNode(date, value, label);
	  }

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Compares this node to another by date.
	  /// </summary>
	  /// <param name="other">  the other curve node </param>
	  /// <returns> negative if this node is earlier, positive if later and zero if equal </returns>
	  public int CompareTo(LoadedCurveNode other)
	  {
		return ComparisonChain.start().compare(DateTime, other.Date).compare(Value, other.Value).compare(Label, other.Label).result();
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code LoadedCurveNode}.
	  /// </summary>
	  private static readonly TypedMetaBean<LoadedCurveNode> META_BEAN = LightMetaBean.of(typeof(LoadedCurveNode), MethodHandles.lookup(), new string[] {"date", "value", "label"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code LoadedCurveNode}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<LoadedCurveNode> meta()
	  {
		return META_BEAN;
	  }

	  static LoadedCurveNode()
	  {
		MetaBean.register(META_BEAN);
	  }

	  private LoadedCurveNode(LocalDate date, double value, string label)
	  {
		JodaBeanUtils.notNull(date, "date");
		JodaBeanUtils.notNull(label, "label");
		this.date = date;
		this.value = value;
		this.label = label;
	  }

	  public override TypedMetaBean<LoadedCurveNode> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the date that the curve node value applies to. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public LocalDate Date
	  {
		  get
		  {
			return date;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the value of the curve at the node. </summary>
	  /// <returns> the value of the property </returns>
	  public double Value
	  {
		  get
		  {
			return value;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the label to use for the node. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public string Label
	  {
		  get
		  {
			return label;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  LoadedCurveNode other = (LoadedCurveNode) obj;
		  return JodaBeanUtils.equal(date, other.date) && JodaBeanUtils.equal(value, other.value) && JodaBeanUtils.equal(label, other.label);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(date);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(value);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(label);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(128);
		buf.Append("LoadedCurveNode{");
		buf.Append("date").Append('=').Append(date).Append(',').Append(' ');
		buf.Append("value").Append('=').Append(value).Append(',').Append(' ');
		buf.Append("label").Append('=').Append(JodaBeanUtils.ToString(label));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}