using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc
{

	using Bean = org.joda.beans.Bean;
	using BeanBuilder = org.joda.beans.BeanBuilder;
	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using MetaProperty = org.joda.beans.MetaProperty;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using ImmutableValidator = org.joda.beans.gen.ImmutableValidator;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using DirectMetaBean = org.joda.beans.impl.direct.DirectMetaBean;
	using DirectMetaProperty = org.joda.beans.impl.direct.DirectMetaProperty;
	using DirectMetaPropertyMap = org.joda.beans.impl.direct.DirectMetaPropertyMap;
	using DirectPrivateBeanBuilder = org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

	/// <summary>
	/// The default, immutable implementation of <seealso cref="Measure"/>.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(builderScope = "private") public final class ImmutableMeasure implements Measure, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class ImmutableMeasure : Measure, ImmutableBean
	{

	  /// <summary>
	  /// Pattern for checking the name.
	  /// It must only contains the characters A-Z, a-z, 0-9 and -.
	  /// </summary>
	  private static readonly Pattern NAME_PATTERN = Pattern.compile("[A-Za-z0-9-]+");

	  /// <summary>
	  /// The measure name.
	  /// <para>
	  /// Measure names must only contains the characters A-Z, a-z, 0-9 and -.
	  /// </para>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull", overrideGet = true) private final String name;
	  private readonly string name;

	  /// <summary>
	  /// Flag indicating whether measure values should be automatically converted to the reporting currency.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(overrideGet = true) private final boolean currencyConvertible;
	  private readonly bool currencyConvertible;

	  //--------------------------------------------------------------------------------------------------

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @ImmutableValidator private void validate()
	  private void validate()
	  {
		if (!NAME_PATTERN.matcher(name).matches())
		{
		  throw new System.ArgumentException("Measure name must only contain the characters A-Z, a-z, 0-9 and -");
		}
	  }

	  /// <summary>
	  /// Returns a measure with the specified name whose values will be automatically converted to the reporting currency.
	  /// <para>
	  /// Measure names must only contains the characters A-Z, a-z, 0-9 and -.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="name">  the measure name </param>
	  /// <returns> a measure with the specified name </returns>
	  public static ImmutableMeasure of(string name)
	  {
		return new ImmutableMeasure(name, true);
	  }

	  /// <summary>
	  /// Returns a measure with the specified name.
	  /// <para>
	  /// Measure names must only contains the characters A-Z, a-z, 0-9 and -.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="name">  the measure name </param>
	  /// <param name="isCurrencyConvertible">  flag indicating whether measure values should be automatically
	  ///   converted to the reporting currency. </param>
	  /// <returns> a measure with the specified name </returns>
	  public static ImmutableMeasure of(string name, bool isCurrencyConvertible)
	  {
		return new ImmutableMeasure(name, isCurrencyConvertible);
	  }

	  public override string ToString()
	  {
		return Name;
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code ImmutableMeasure}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static ImmutableMeasure.Meta meta()
	  {
		return ImmutableMeasure.Meta.INSTANCE;
	  }

	  static ImmutableMeasure()
	  {
		MetaBean.register(ImmutableMeasure.Meta.INSTANCE);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private ImmutableMeasure(string name, bool currencyConvertible)
	  {
		JodaBeanUtils.notNull(name, "name");
		this.name = name;
		this.currencyConvertible = currencyConvertible;
		validate();
	  }

	  public override ImmutableMeasure.Meta metaBean()
	  {
		return ImmutableMeasure.Meta.INSTANCE;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the measure name.
	  /// <para>
	  /// Measure names must only contains the characters A-Z, a-z, 0-9 and -.
	  /// </para>
	  /// </summary>
	  /// <returns> the value of the property, not null </returns>
	  public string Name
	  {
		  get
		  {
			return name;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets flag indicating whether measure values should be automatically converted to the reporting currency. </summary>
	  /// <returns> the value of the property </returns>
	  public bool CurrencyConvertible
	  {
		  get
		  {
			return currencyConvertible;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  ImmutableMeasure other = (ImmutableMeasure) obj;
		  return JodaBeanUtils.equal(name, other.name) && (currencyConvertible == other.currencyConvertible);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(name);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(currencyConvertible);
		return hash;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The meta-bean for {@code ImmutableMeasure}.
	  /// </summary>
	  public sealed class Meta : DirectMetaBean
	  {
		  internal bool InstanceFieldsInitialized = false;

		  internal void InitializeInstanceFields()
		  {
			  name_Renamed = DirectMetaProperty.ofImmutable(this, "name", typeof(ImmutableMeasure), typeof(string));
			  currencyConvertible_Renamed = DirectMetaProperty.ofImmutable(this, "currencyConvertible", typeof(ImmutableMeasure), Boolean.TYPE);
			  metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "name", "currencyConvertible");
		  }

		/// <summary>
		/// The singleton instance of the meta-bean.
		/// </summary>
		internal static readonly Meta INSTANCE = new Meta();

		/// <summary>
		/// The meta-property for the {@code name} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<string> name_Renamed;
		/// <summary>
		/// The meta-property for the {@code currencyConvertible} property.
		/// </summary>
//JAVA TO C# CONVERTER NOTE: Fields cannot have the same name as methods:
		internal MetaProperty<bool> currencyConvertible_Renamed;
		/// <summary>
		/// The meta-properties.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: private final java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap$ = new org.joda.beans.impl.direct.DirectMetaPropertyMap(this, null, "name", "currencyConvertible");
		internal IDictionary<string, MetaProperty<object>> metaPropertyMap$;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Meta()
		{
			if (!InstanceFieldsInitialized)
			{
				InitializeInstanceFields();
				InstanceFieldsInitialized = true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override protected org.joda.beans.MetaProperty<?> metaPropertyGet(String propertyName)
		protected internal override MetaProperty<object> metaPropertyGet(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return name_Renamed;
			case 1098971060: // currencyConvertible
			  return currencyConvertible_Renamed;
		  }
		  return base.metaPropertyGet(propertyName);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public org.joda.beans.BeanBuilder<? extends ImmutableMeasure> builder()
		public override BeanBuilder<ImmutableMeasure> builder()
		{
		  return new ImmutableMeasure.Builder();
		}

		public override Type beanType()
		{
		  return typeof(ImmutableMeasure);
		}

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Map<String, org.joda.beans.MetaProperty<?>> metaPropertyMap()
		public override IDictionary<string, MetaProperty<object>> metaPropertyMap()
		{
		  return metaPropertyMap$;
		}

		//-----------------------------------------------------------------------
		/// <summary>
		/// The meta-property for the {@code name} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<string> name()
		{
		  return name_Renamed;
		}

		/// <summary>
		/// The meta-property for the {@code currencyConvertible} property. </summary>
		/// <returns> the meta-property, not null </returns>
		public MetaProperty<bool> currencyConvertible()
		{
		  return currencyConvertible_Renamed;
		}

		//-----------------------------------------------------------------------
		protected internal override object propertyGet(Bean bean, string propertyName, bool quiet)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return ((ImmutableMeasure) bean).Name;
			case 1098971060: // currencyConvertible
			  return ((ImmutableMeasure) bean).CurrencyConvertible;
		  }
		  return base.propertyGet(bean, propertyName, quiet);
		}

		protected internal override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)
		{
		  metaProperty(propertyName);
		  if (quiet)
		  {
			return;
		  }
		  throw new System.NotSupportedException("Property cannot be written: " + propertyName);
		}

	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// The bean-builder for {@code ImmutableMeasure}.
	  /// </summary>
	  private sealed class Builder : DirectPrivateBeanBuilder<ImmutableMeasure>
	  {

		internal string name;
		internal bool currencyConvertible;

		/// <summary>
		/// Restricted constructor.
		/// </summary>
		internal Builder()
		{
		}

		//-----------------------------------------------------------------------
		public override object get(string propertyName)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  return name;
			case 1098971060: // currencyConvertible
			  return currencyConvertible;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		}

		public override Builder set(string propertyName, object newValue)
		{
		  switch (propertyName.GetHashCode())
		  {
			case 3373707: // name
			  this.name = (string) newValue;
			  break;
			case 1098971060: // currencyConvertible
			  this.currencyConvertible = (bool?) newValue.Value;
			  break;
			default:
			  throw new NoSuchElementException("Unknown property: " + propertyName);
		  }
		  return this;
		}

		public override ImmutableMeasure build()
		{
		  return new ImmutableMeasure(name, currencyConvertible);
		}

		//-----------------------------------------------------------------------
		public override string ToString()
		{
		  StringBuilder buf = new StringBuilder(96);
		  buf.Append("ImmutableMeasure.Builder{");
		  buf.Append("name").Append('=').Append(JodaBeanUtils.ToString(name)).Append(',').Append(' ');
		  buf.Append("currencyConvertible").Append('=').Append(JodaBeanUtils.ToString(currencyConvertible));
		  buf.Append('}');
		  return buf.ToString();
		}

	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}