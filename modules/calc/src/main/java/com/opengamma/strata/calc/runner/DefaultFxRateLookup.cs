using System;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.runner
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using Currency = com.opengamma.strata.basics.currency.Currency;
	using FxRateProvider = com.opengamma.strata.basics.currency.FxRateProvider;
	using MarketData = com.opengamma.strata.data.MarketData;
	using MarketDataFxRateProvider = com.opengamma.strata.data.MarketDataFxRateProvider;
	using ObservableSource = com.opengamma.strata.data.ObservableSource;

	/// <summary>
	/// The default FX rate lookup.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", constructorScope = "package") final class DefaultFxRateLookup implements FxRateLookup, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class DefaultFxRateLookup : FxRateLookup, ImmutableBean
	{

	  /// <summary>
	  /// The singleton instance.
	  /// </summary>
	  internal static readonly DefaultFxRateLookup DEFAULT = new DefaultFxRateLookup(null, ObservableSource.NONE);

	  /// <summary>
	  /// The triangulation currency.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(get = "optional") private final com.opengamma.strata.basics.currency.Currency currency;
	  private readonly Currency currency;
	  /// <summary>
	  /// The source of observable market data.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.data.ObservableSource observableSource;
	  private readonly ObservableSource observableSource;

	  // creates an instance
	  internal DefaultFxRateLookup(ObservableSource observableSource) : this(null, observableSource)
	  {
	  }

	  //-------------------------------------------------------------------------
	  public FxRateProvider fxRateProvider(MarketData marketData)
	  {
		if (currency == null)
		{
		  return MarketDataFxRateProvider.of(marketData, observableSource);
		}
		return MarketDataFxRateProvider.of(marketData, observableSource, currency);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code DefaultFxRateLookup}.
	  /// </summary>
	  private static readonly TypedMetaBean<DefaultFxRateLookup> META_BEAN = LightMetaBean.of(typeof(DefaultFxRateLookup), MethodHandles.lookup(), new string[] {"currency", "observableSource"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code DefaultFxRateLookup}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<DefaultFxRateLookup> meta()
	  {
		return META_BEAN;
	  }

	  static DefaultFxRateLookup()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="currency">  the value of the property </param>
	  /// <param name="observableSource">  the value of the property, not null </param>
	  internal DefaultFxRateLookup(Currency currency, ObservableSource observableSource)
	  {
		JodaBeanUtils.notNull(observableSource, "observableSource");
		this.currency = currency;
		this.observableSource = observableSource;
	  }

	  public override TypedMetaBean<DefaultFxRateLookup> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the triangulation currency. </summary>
	  /// <returns> the optional value of the property, not null </returns>
	  public Optional<Currency> Currency
	  {
		  get
		  {
			return Optional.ofNullable(currency);
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the source of observable market data. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ObservableSource ObservableSource
	  {
		  get
		  {
			return observableSource;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  DefaultFxRateLookup other = (DefaultFxRateLookup) obj;
		  return JodaBeanUtils.equal(currency, other.currency) && JodaBeanUtils.equal(observableSource, other.observableSource);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(currency);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(observableSource);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("DefaultFxRateLookup{");
		buf.Append("currency").Append('=').Append(currency).Append(',').Append(' ');
		buf.Append("observableSource").Append('=').Append(JodaBeanUtils.ToString(observableSource));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}