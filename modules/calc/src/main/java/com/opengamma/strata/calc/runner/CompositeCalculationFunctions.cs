using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.runner
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using CalculationTarget = com.opengamma.strata.basics.CalculationTarget;

	/// <summary>
	/// A set of calculation functions which combines the functions in two other sets of functions.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") final class CompositeCalculationFunctions implements CalculationFunctions, org.joda.beans.ImmutableBean
	internal sealed class CompositeCalculationFunctions : CalculationFunctions, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final CalculationFunctions functions1;
		private readonly CalculationFunctions functions1;

	  /// <summary>
	  /// The second set of calculation functions. </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final CalculationFunctions functions2;
	  private readonly CalculationFunctions functions2;

	  /// <summary>
	  /// Returns a set of calculation functions composed of two other sets of functions.
	  /// <para>
	  /// If both sets of functions contain a function for a target then the function from {@code functions1} is returned.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="functions1">  the higher priority set of functions </param>
	  /// <param name="functions2">  the lower priority set of functions </param>
	  /// <returns> a set of calculation functions composed of two other sets of functions </returns>
	  internal static CompositeCalculationFunctions of(CalculationFunctions functions1, CalculationFunctions functions2)
	  {
		return new CompositeCalculationFunctions(functions1, functions2);
	  }

//JAVA TO C# CONVERTER TODO TASK: There is no .NET equivalent to the Java 'super' constraint:
//ORIGINAL LINE: @Override public <T extends com.opengamma.strata.basics.CalculationTarget> java.util.Optional<CalculationFunction<? super T>> findFunction(T target)
	  public Optional<CalculationFunction> findFunction<T>(T target) where T : com.opengamma.strata.basics.CalculationTarget
	  {
//JAVA TO C# CONVERTER TODO TASK: There is no .NET equivalent to the Java 'super' constraint:
//ORIGINAL LINE: java.util.Optional<CalculationFunction<? super T>> function = functions1.findFunction(target);
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
		Optional<CalculationFunction> function = functions1.findFunction(target);
		return function.Present ? function : functions2.findFunction(target);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CompositeCalculationFunctions}.
	  /// </summary>
	  private static readonly TypedMetaBean<CompositeCalculationFunctions> META_BEAN = LightMetaBean.of(typeof(CompositeCalculationFunctions), MethodHandles.lookup(), new string[] {"functions1", "functions2"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code CompositeCalculationFunctions}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<CompositeCalculationFunctions> meta()
	  {
		return META_BEAN;
	  }

	  static CompositeCalculationFunctions()
	  {
		MetaBean.register(META_BEAN);
	  }

	  private CompositeCalculationFunctions(CalculationFunctions functions1, CalculationFunctions functions2)
	  {
		JodaBeanUtils.notNull(functions1, "functions1");
		JodaBeanUtils.notNull(functions2, "functions2");
		this.functions1 = functions1;
		this.functions2 = functions2;
	  }

	  public override TypedMetaBean<CompositeCalculationFunctions> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the first set of calculation functions. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CalculationFunctions Functions1
	  {
		  get
		  {
			return functions1;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the second set of calculation functions. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CalculationFunctions Functions2
	  {
		  get
		  {
			return functions2;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CompositeCalculationFunctions other = (CompositeCalculationFunctions) obj;
		  return JodaBeanUtils.equal(functions1, other.functions1) && JodaBeanUtils.equal(functions2, other.functions2);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(functions1);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(functions2);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("CompositeCalculationFunctions{");
		buf.Append("functions1").Append('=').Append(functions1).Append(',').Append(' ');
		buf.Append("functions2").Append('=').Append(JodaBeanUtils.ToString(functions2));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}