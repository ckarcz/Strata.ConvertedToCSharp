using System;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.marketdata
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ReferenceData = com.opengamma.strata.basics.ReferenceData;
	using MarketDataName = com.opengamma.strata.data.MarketDataName;
	using NamedMarketDataId = com.opengamma.strata.data.NamedMarketDataId;
	using MarketDataBox = com.opengamma.strata.data.scenario.MarketDataBox;

	/// <summary>
	/// A market data filter that matches a specific name.
	/// </summary>
	/// @param <T>  the type of the market data handled by the filter </param>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", constructorScope = "package") final class NameFilter<T> implements MarketDataFilter<T, com.opengamma.strata.data.NamedMarketDataId<T>>, org.joda.beans.ImmutableBean
	internal sealed class NameFilter<T> : MarketDataFilter<T, NamedMarketDataId<T>>, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.data.MarketDataName<T> name;
		private readonly MarketDataName<T> name;

	  //-------------------------------------------------------------------------
	  public Type MarketDataIdType
	  {
		  get
		  {
			return typeof(NamedMarketDataId);
		  }
	  }

	  public bool matches(NamedMarketDataId<T> marketDataId, MarketDataBox<T> marketData, ReferenceData refData)
	  {
		return marketDataId.MarketDataName.Equals(name);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code NameFilter}.
	  /// </summary>
	  private static readonly MetaBean META_BEAN = LightMetaBean.of(typeof(NameFilter), MethodHandles.lookup(), new string[] {"name"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code NameFilter}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static MetaBean meta()
	  {
		return META_BEAN;
	  }

	  static NameFilter()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="name">  the value of the property, not null </param>
	  internal NameFilter(MarketDataName<T> name)
	  {
		JodaBeanUtils.notNull(name, "name");
		this.name = name;
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Override @SuppressWarnings("unchecked") public org.joda.beans.TypedMetaBean<NameFilter<T>> metaBean()
	  public override TypedMetaBean<NameFilter<T>> metaBean()
	  {
		return (TypedMetaBean<NameFilter<T>>) META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the name that is matched by this filter. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public MarketDataName<T> Name
	  {
		  get
		  {
			return name;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: NameFilter<?> other = (NameFilter<?>) obj;
		  NameFilter<object> other = (NameFilter<object>) obj;
		  return JodaBeanUtils.equal(name, other.name);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(name);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("NameFilter{");
		buf.Append("name").Append('=').Append(JodaBeanUtils.ToString(name));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}