using System.Text;

/*
 * Copyright (C) 2018 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.runner
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using CalculationTarget = com.opengamma.strata.basics.CalculationTarget;
	using ResolvableCalculationTarget = com.opengamma.strata.basics.ResolvableCalculationTarget;

	/// <summary>
	/// A calculation target used when the actual target cannot be resolved.
	/// <para>
	/// This uses a single instance of <seealso cref="ExecutorService"/>.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", constructorScope = "package") final class UnresolvableTarget implements com.opengamma.strata.basics.CalculationTarget, org.joda.beans.ImmutableBean
	internal sealed class UnresolvableTarget : CalculationTarget, ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.ResolvableCalculationTarget target;
		private readonly ResolvableCalculationTarget target;
	  /// <summary>
	  /// The failure message.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final String message;
	  private readonly string message;

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code UnresolvableTarget}.
	  /// </summary>
	  private static readonly TypedMetaBean<UnresolvableTarget> META_BEAN = LightMetaBean.of(typeof(UnresolvableTarget), MethodHandles.lookup(), new string[] {"target", "message"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code UnresolvableTarget}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<UnresolvableTarget> meta()
	  {
		return META_BEAN;
	  }

	  static UnresolvableTarget()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="target">  the value of the property, not null </param>
	  /// <param name="message">  the value of the property, not null </param>
	  internal UnresolvableTarget(ResolvableCalculationTarget target, string message)
	  {
		JodaBeanUtils.notNull(target, "target");
		JodaBeanUtils.notNull(message, "message");
		this.target = target;
		this.message = message;
	  }

	  public override TypedMetaBean<UnresolvableTarget> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the target that could not be resolved. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ResolvableCalculationTarget Target
	  {
		  get
		  {
			return target;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the failure message. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public string Message
	  {
		  get
		  {
			return message;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  UnresolvableTarget other = (UnresolvableTarget) obj;
		  return JodaBeanUtils.equal(target, other.target) && JodaBeanUtils.equal(message, other.message);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(target);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(message);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("UnresolvableTarget{");
		buf.Append("target").Append('=').Append(target).Append(',').Append(' ');
		buf.Append("message").Append('=').Append(JodaBeanUtils.ToString(message));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}