using System;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.runner
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using FxRateProvider = com.opengamma.strata.basics.currency.FxRateProvider;
	using FxMatrixId = com.opengamma.strata.data.FxMatrixId;
	using MarketData = com.opengamma.strata.data.MarketData;

	/// <summary>
	/// The matrix FX rate lookup.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", constructorScope = "package") final class MatrixFxRateLookup implements FxRateLookup, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	internal sealed class MatrixFxRateLookup : FxRateLookup, ImmutableBean
	{

	  /// <summary>
	  /// The singleton instance.
	  /// </summary>
	  internal static readonly MatrixFxRateLookup DEFAULT = new MatrixFxRateLookup(FxMatrixId.standard());

	  /// <summary>
	  /// The FX matrix identifier.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.data.FxMatrixId matrixId;
	  private readonly FxMatrixId matrixId;

	  //-------------------------------------------------------------------------
	  public FxRateProvider fxRateProvider(MarketData marketData)
	  {
		return marketData.getValue(matrixId);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code MatrixFxRateLookup}.
	  /// </summary>
	  private static readonly TypedMetaBean<MatrixFxRateLookup> META_BEAN = LightMetaBean.of(typeof(MatrixFxRateLookup), MethodHandles.lookup(), new string[] {"matrixId"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code MatrixFxRateLookup}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<MatrixFxRateLookup> meta()
	  {
		return META_BEAN;
	  }

	  static MatrixFxRateLookup()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// Creates an instance. </summary>
	  /// <param name="matrixId">  the value of the property, not null </param>
	  internal MatrixFxRateLookup(FxMatrixId matrixId)
	  {
		JodaBeanUtils.notNull(matrixId, "matrixId");
		this.matrixId = matrixId;
	  }

	  public override TypedMetaBean<MatrixFxRateLookup> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the FX matrix identifier. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public FxMatrixId MatrixId
	  {
		  get
		  {
			return matrixId;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  MatrixFxRateLookup other = (MatrixFxRateLookup) obj;
		  return JodaBeanUtils.equal(matrixId, other.matrixId);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(matrixId);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(64);
		buf.Append("MatrixFxRateLookup{");
		buf.Append("matrixId").Append('=').Append(JodaBeanUtils.ToString(matrixId));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}