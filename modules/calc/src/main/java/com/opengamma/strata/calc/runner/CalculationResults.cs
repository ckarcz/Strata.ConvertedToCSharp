using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.calc.runner
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ImmutableList = com.google.common.collect.ImmutableList;
	using CalculationTarget = com.opengamma.strata.basics.CalculationTarget;

	/// <summary>
	/// A set of related calculation results for a single calculation target.
	/// <para>
	/// This contains a list of <seealso cref="CalculationResult"/>, produced by a single <seealso cref="CalculationTask"/>.
	/// Each individual result relates to a single cell in the output grid.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") public final class CalculationResults implements org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class CalculationResults : ImmutableBean
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.opengamma.strata.basics.CalculationTarget target;
		private readonly CalculationTarget target;
	  /// <summary>
	  /// The calculated cells.
	  /// Each entry contains a calculation result for a single cell.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final com.google.common.collect.ImmutableList<CalculationResult> cells;
	  private readonly ImmutableList<CalculationResult> cells;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains a calculation result from individual calculations.
	  /// </summary>
	  /// <param name="target">  the calculation target, such as a trade </param>
	  /// <param name="results">  the results of the calculation </param>
	  /// <returns> the calculation result </returns>
	  public static CalculationResults of(CalculationTarget target, IList<CalculationResult> results)
	  {
		return new CalculationResults(target, results);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code CalculationResults}.
	  /// </summary>
	  private static readonly TypedMetaBean<CalculationResults> META_BEAN = LightMetaBean.of(typeof(CalculationResults), MethodHandles.lookup(), new string[] {"target", "cells"}, null, ImmutableList.of());

	  /// <summary>
	  /// The meta-bean for {@code CalculationResults}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<CalculationResults> meta()
	  {
		return META_BEAN;
	  }

	  static CalculationResults()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private CalculationResults(CalculationTarget target, IList<CalculationResult> cells)
	  {
		JodaBeanUtils.notNull(target, "target");
		JodaBeanUtils.notNull(cells, "cells");
		this.target = target;
		this.cells = ImmutableList.copyOf(cells);
	  }

	  public override TypedMetaBean<CalculationResults> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the target of the calculation, often a trade. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public CalculationTarget Target
	  {
		  get
		  {
			return target;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the calculated cells.
	  /// Each entry contains a calculation result for a single cell. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ImmutableList<CalculationResult> Cells
	  {
		  get
		  {
			return cells;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  CalculationResults other = (CalculationResults) obj;
		  return JodaBeanUtils.equal(target, other.target) && JodaBeanUtils.equal(cells, other.cells);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(target);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(cells);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("CalculationResults{");
		buf.Append("target").Append('=').Append(target).Append(',').Append(' ');
		buf.Append("cells").Append('=').Append(JodaBeanUtils.ToString(cells));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}