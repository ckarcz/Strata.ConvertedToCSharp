using System;

/*
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.data
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using FxMatrix = com.opengamma.strata.basics.currency.FxMatrix;

	/// <summary>
	/// Identifies the market data for an FX matrix.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light", cacheHashCode = true) public final class FxMatrixId implements MarketDataId<com.opengamma.strata.basics.currency.FxMatrix>, org.joda.beans.ImmutableBean, java.io.Serializable
	[Serializable]
	public sealed class FxMatrixId : MarketDataId<FxMatrix>, ImmutableBean
	{

	  /// <summary>
	  /// The standard identifier.
	  /// </summary>
	  private static readonly FxMatrixId STANDARD = new FxMatrixId(ObservableSource.NONE);

	  /// <summary>
	  /// The source of observable market data.
	  /// This is used when looking up the underlying market quotes for the rate.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ObservableSource observableSource;
	  private readonly ObservableSource observableSource;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance representing an FX matrix.
	  /// </summary>
	  /// <returns> an identifier for the FX matrix </returns>
	  public static FxMatrixId standard()
	  {
		return STANDARD;
	  }

	  /// <summary>
	  /// Obtains an instance representing an FX matrix, specifying the source.
	  /// </summary>
	  /// <param name="observableSource">  the source of the observable market data used to create the rate </param>
	  /// <returns> an identifier for the FX matrix </returns>
	  public static FxMatrixId of(ObservableSource observableSource)
	  {
		return new FxMatrixId(observableSource);
	  }

	  //-------------------------------------------------------------------------
	  public Type<FxMatrix> MarketDataType
	  {
		  get
		  {
			return typeof(FxMatrix);
		  }
	  }

	  public override string ToString()
	  {
		return "FxMatrixId" + (observableSource.Equals(ObservableSource.NONE) ? "" : ":" + observableSource);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code FxMatrixId}.
	  /// </summary>
	  private static readonly TypedMetaBean<FxMatrixId> META_BEAN = LightMetaBean.of(typeof(FxMatrixId), MethodHandles.lookup(), new string[] {"observableSource"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code FxMatrixId}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<FxMatrixId> meta()
	  {
		return META_BEAN;
	  }

	  static FxMatrixId()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  /// <summary>
	  /// The cached hash code, using the racy single-check idiom.
	  /// </summary>
	  [NonSerialized]
	  private int cacheHashCode;

	  private FxMatrixId(ObservableSource observableSource)
	  {
		JodaBeanUtils.notNull(observableSource, "observableSource");
		this.observableSource = observableSource;
	  }

	  public override TypedMetaBean<FxMatrixId> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the source of observable market data.
	  /// This is used when looking up the underlying market quotes for the rate. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ObservableSource ObservableSource
	  {
		  get
		  {
			return observableSource;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  FxMatrixId other = (FxMatrixId) obj;
		  return JodaBeanUtils.equal(observableSource, other.observableSource);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = cacheHashCode;
		if (hash == 0)
		{
		  hash = this.GetType().GetHashCode();
		  hash = hash * 31 + JodaBeanUtils.GetHashCode(observableSource);
		  cacheHashCode = hash;
		}
		return hash;
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}