using System;
using System.Collections.Generic;
using System.Text;

/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
namespace com.opengamma.strata.data.scenario
{

	using ImmutableBean = org.joda.beans.ImmutableBean;
	using JodaBeanUtils = org.joda.beans.JodaBeanUtils;
	using MetaBean = org.joda.beans.MetaBean;
	using TypedMetaBean = org.joda.beans.TypedMetaBean;
	using BeanDefinition = org.joda.beans.gen.BeanDefinition;
	using ImmutableValidator = org.joda.beans.gen.ImmutableValidator;
	using PropertyDefinition = org.joda.beans.gen.PropertyDefinition;
	using LightMetaBean = org.joda.beans.impl.light.LightMetaBean;

	using ArgChecker = com.opengamma.strata.collect.ArgChecker;
	using LocalDateDoubleTimeSeries = com.opengamma.strata.collect.timeseries.LocalDateDoubleTimeSeries;

	/// <summary>
	/// A single scenario view of multi-scenario market data.
	/// <para>
	/// This wraps an instance of <seealso cref="ScenarioMarketData"/> which contains market data for multiple scenarios.
	/// This object returns market data from one of those scenarios. The scenario used as the source of the
	/// data is controlled by the {@code scenarioIndex} argument.
	/// </para>
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @BeanDefinition(style = "light") final class SingleScenarioMarketData implements org.joda.beans.ImmutableBean, com.opengamma.strata.data.MarketData, java.io.Serializable
	[Serializable]
	internal sealed class SingleScenarioMarketData : ImmutableBean, MarketData
	{
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition(validate = "notNull") private final ScenarioMarketData marketData;
		private readonly ScenarioMarketData marketData;
	  /// <summary>
	  /// The index of the scenario.
	  /// This index is used to query the multi-scenario market data.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @PropertyDefinition private final int scenarioIndex;
	  private readonly int scenarioIndex;

	  //-------------------------------------------------------------------------
	  /// <summary>
	  /// Obtains an instance from an underlying set of market data and scenario index.
	  /// <para>
	  /// This provides a single scenario view of the underlying market data.
	  /// 
	  /// </para>
	  /// </summary>
	  /// <param name="marketData">  the market data </param>
	  /// <param name="scenarioIndex">  the index of the scenario to be viewed </param>
	  /// <returns> the market data </returns>
	  /// <exception cref="IllegalArgumentException"> if the scenario index is invalid </exception>
	  public static SingleScenarioMarketData of(ScenarioMarketData marketData, int scenarioIndex)
	  {
		return new SingleScenarioMarketData(marketData, scenarioIndex);
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @ImmutableValidator private void validate()
	  private void validate()
	  {
		ArgChecker.inRange(scenarioIndex, 0, marketData.ScenarioCount, "scenarioIndex");
	  }

	  //-------------------------------------------------------------------------
	  public LocalDate ValuationDate
	  {
		  get
		  {
			return marketData.ValuationDate.getValue(scenarioIndex);
		  }
	  }

	  public override bool containsValue<T1>(MarketDataId<T1> id)
	  {
		return marketData.containsValue(id);
	  }

	  public override T getValue<T>(MarketDataId<T> id)
	  {
		return marketData.getValue(id).getValue(scenarioIndex);
	  }

	  public Optional<T> findValue<T>(MarketDataId<T> id)
	  {
		Optional<MarketDataBox<T>> optionalBox = marketData.findValue(id);
		return optionalBox.map(box => box.getValue(scenarioIndex));
	  }

//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: @Override public java.util.Set<com.opengamma.strata.data.MarketDataId<?>> getIds()
	  public ISet<MarketDataId<object>> Ids
	  {
		  get
		  {
			return marketData.Ids;
		  }
	  }

	  public ISet<MarketDataId<T>> findIds<T>(MarketDataName<T> name)
	  {
		return marketData.findIds(name);
	  }

	  public ISet<ObservableId> TimeSeriesIds
	  {
		  get
		  {
			return marketData.TimeSeriesIds;
		  }
	  }

	  public LocalDateDoubleTimeSeries getTimeSeries(ObservableId id)
	  {
		return marketData.getTimeSeries(id);
	  }

	  //------------------------- AUTOGENERATED START -------------------------
	  /// <summary>
	  /// The meta-bean for {@code SingleScenarioMarketData}.
	  /// </summary>
	  private static readonly TypedMetaBean<SingleScenarioMarketData> META_BEAN = LightMetaBean.of(typeof(SingleScenarioMarketData), MethodHandles.lookup(), new string[] {"marketData", "scenarioIndex"}, new object[0]);

	  /// <summary>
	  /// The meta-bean for {@code SingleScenarioMarketData}. </summary>
	  /// <returns> the meta-bean, not null </returns>
	  public static TypedMetaBean<SingleScenarioMarketData> meta()
	  {
		return META_BEAN;
	  }

	  static SingleScenarioMarketData()
	  {
		MetaBean.register(META_BEAN);
	  }

	  /// <summary>
	  /// The serialization version id.
	  /// </summary>
	  private const long serialVersionUID = 1L;

	  private SingleScenarioMarketData(ScenarioMarketData marketData, int scenarioIndex)
	  {
		JodaBeanUtils.notNull(marketData, "marketData");
		this.marketData = marketData;
		this.scenarioIndex = scenarioIndex;
		validate();
	  }

	  public override TypedMetaBean<SingleScenarioMarketData> metaBean()
	  {
		return META_BEAN;
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the set of market data for all scenarios. </summary>
	  /// <returns> the value of the property, not null </returns>
	  public ScenarioMarketData MarketData
	  {
		  get
		  {
			return marketData;
		  }
	  }

	  //-----------------------------------------------------------------------
	  /// <summary>
	  /// Gets the index of the scenario.
	  /// This index is used to query the multi-scenario market data. </summary>
	  /// <returns> the value of the property </returns>
	  public int ScenarioIndex
	  {
		  get
		  {
			return scenarioIndex;
		  }
	  }

	  //-----------------------------------------------------------------------
	  public override bool Equals(object obj)
	  {
		if (obj == this)
		{
		  return true;
		}
		if (obj != null && obj.GetType() == this.GetType())
		{
		  SingleScenarioMarketData other = (SingleScenarioMarketData) obj;
		  return JodaBeanUtils.equal(marketData, other.marketData) && (scenarioIndex == other.scenarioIndex);
		}
		return false;
	  }

	  public override int GetHashCode()
	  {
		int hash = this.GetType().GetHashCode();
		hash = hash * 31 + JodaBeanUtils.GetHashCode(marketData);
		hash = hash * 31 + JodaBeanUtils.GetHashCode(scenarioIndex);
		return hash;
	  }

	  public override string ToString()
	  {
		StringBuilder buf = new StringBuilder(96);
		buf.Append("SingleScenarioMarketData{");
		buf.Append("marketData").Append('=').Append(marketData).Append(',').Append(' ');
		buf.Append("scenarioIndex").Append('=').Append(JodaBeanUtils.ToString(scenarioIndex));
		buf.Append('}');
		return buf.ToString();
	  }

	  //-------------------------- AUTOGENERATED END --------------------------
	}

}